
GccBoardProject4-usart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ce4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000085c  20000000  00401ce4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  2000085c  00402540  0002085c  2**2
                  ALLOC
  3 .stack        00003004  2000094c  00402630  0002085c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020886  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001040b  00000000  00000000  000208df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002893  00000000  00000000  00030cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000006f0  00000000  00000000  0003357d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00011559  00000000  00000000  00033c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b200  00000000  00000000  000451c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0004315c  00000000  00000000  000503c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a06  00000000  00000000  00093522  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000618  00000000  00000000  00095f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015bc  00000000  00000000  00096540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 39 00 20 79 06 40 00 75 06 40 00 75 06 40 00     P9. y.@.u.@.u.@.
  400010:	75 06 40 00 75 06 40 00 75 06 40 00 00 00 00 00     u.@.u.@.u.@.....
	...
  40002c:	75 06 40 00 75 06 40 00 00 00 00 00 75 06 40 00     u.@.u.@.....u.@.
  40003c:	75 06 40 00 75 06 40 00 75 06 40 00 75 06 40 00     u.@.u.@.u.@.u.@.
  40004c:	75 06 40 00 75 06 40 00 75 06 40 00 75 06 40 00     u.@.u.@.u.@.u.@.
  40005c:	00 00 00 00 75 06 40 00 75 06 40 00 75 06 40 00     ....u.@.u.@.u.@.
  40006c:	75 06 40 00 75 06 40 00 75 06 40 00 75 06 40 00     u.@.u.@.u.@.u.@.
  40007c:	75 06 40 00 75 06 40 00 75 06 40 00 00 00 00 00     u.@.u.@.u.@.....
  40008c:	75 06 40 00 75 06 40 00 75 06 40 00 75 06 40 00     u.@.u.@.u.@.u.@.
  40009c:	75 06 40 00 75 06 40 00 75 06 40 00 75 06 40 00     u.@.u.@.u.@.u.@.
  4000ac:	75 06 40 00 75 06 40 00 09 02 40 00 75 06 40 00     u.@.u.@...@.u.@.
  4000bc:	75 06 40 00                                         u.@.

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	2000085c 	.word	0x2000085c
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00401ce4 	.word	0x00401ce4

004000e4 <frame_dummy>:
  4000e4:	4b0c      	ldr	r3, [pc, #48]	; (400118 <frame_dummy+0x34>)
  4000e6:	b143      	cbz	r3, 4000fa <frame_dummy+0x16>
  4000e8:	480c      	ldr	r0, [pc, #48]	; (40011c <frame_dummy+0x38>)
  4000ea:	490d      	ldr	r1, [pc, #52]	; (400120 <frame_dummy+0x3c>)
  4000ec:	b510      	push	{r4, lr}
  4000ee:	f3af 8000 	nop.w
  4000f2:	480c      	ldr	r0, [pc, #48]	; (400124 <frame_dummy+0x40>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b923      	cbnz	r3, 400102 <frame_dummy+0x1e>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	480a      	ldr	r0, [pc, #40]	; (400124 <frame_dummy+0x40>)
  4000fc:	6803      	ldr	r3, [r0, #0]
  4000fe:	b933      	cbnz	r3, 40010e <frame_dummy+0x2a>
  400100:	4770      	bx	lr
  400102:	4b09      	ldr	r3, [pc, #36]	; (400128 <frame_dummy+0x44>)
  400104:	2b00      	cmp	r3, #0
  400106:	d0f7      	beq.n	4000f8 <frame_dummy+0x14>
  400108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40010c:	4718      	bx	r3
  40010e:	4b06      	ldr	r3, [pc, #24]	; (400128 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f5      	beq.n	400100 <frame_dummy+0x1c>
  400114:	4718      	bx	r3
  400116:	bf00      	nop
  400118:	00000000 	.word	0x00000000
  40011c:	00401ce4 	.word	0x00401ce4
  400120:	20000860 	.word	0x20000860
  400124:	00401ce4 	.word	0x00401ce4
  400128:	00000000 	.word	0x00000000

0040012c <adc_get_config_defaults>:
	Assert(cfg);

#if SAMG55
	cfg->resolution = ADC_12_BITS;
#else
	cfg->resolution = ADC_10_BITS;
  40012c:	2300      	movs	r3, #0
  40012e:	6003      	str	r3, [r0, #0]
#endif
	cfg->mck = sysclk_get_cpu_hz();
  400130:	4a06      	ldr	r2, [pc, #24]	; (40014c <adc_get_config_defaults+0x20>)
  400132:	6042      	str	r2, [r0, #4]
	cfg->adc_clock = 6000000UL;
  400134:	4a06      	ldr	r2, [pc, #24]	; (400150 <adc_get_config_defaults+0x24>)
  400136:	6082      	str	r2, [r0, #8]
	cfg->startup_time = ADC_STARTUP_TIME_4;
  400138:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40013c:	60c2      	str	r2, [r0, #12]
	cfg->tracktim = 2;
  40013e:	2202      	movs	r2, #2
  400140:	7402      	strb	r2, [r0, #16]
	cfg->transfer = 2;
  400142:	7442      	strb	r2, [r0, #17]
	cfg->useq = false;
  400144:	7483      	strb	r3, [r0, #18]
	cfg->tag = false;
  400146:	74c3      	strb	r3, [r0, #19]
	cfg->aste = false;
  400148:	7503      	strb	r3, [r0, #20]
  40014a:	4770      	bx	lr
  40014c:	05f5e100 	.word	0x05f5e100
  400150:	005b8d80 	.word	0x005b8d80

00400154 <adc_set_resolution>:
		const enum adc_resolution res)
{
#if SAMG55
	adc->ADC_EMR |= res;
#else
	if (res == ADC_11_BITS || res == ADC_12_BITS) {
  400154:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  400158:	d00a      	beq.n	400170 <adc_set_resolution+0x1c>
  40015a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
  40015e:	d007      	beq.n	400170 <adc_set_resolution+0x1c>
		adc->ADC_MR &= ~ADC_MR_LOWRES;
		adc->ADC_EMR |= res;
	} else {
		adc->ADC_MR |= res;
  400160:	6843      	ldr	r3, [r0, #4]
  400162:	4319      	orrs	r1, r3
  400164:	6041      	str	r1, [r0, #4]
		adc->ADC_EMR &= ~ADC_EMR_OSR_Msk;
  400166:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400168:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40016c:	6403      	str	r3, [r0, #64]	; 0x40
  40016e:	4770      	bx	lr
		adc->ADC_MR &= ~ADC_MR_LOWRES;
  400170:	6843      	ldr	r3, [r0, #4]
  400172:	f023 0310 	bic.w	r3, r3, #16
  400176:	6043      	str	r3, [r0, #4]
		adc->ADC_EMR |= res;
  400178:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40017a:	4319      	orrs	r1, r3
  40017c:	6401      	str	r1, [r0, #64]	; 0x40
  40017e:	4770      	bx	lr

00400180 <adc_init>:
{
  400180:	b538      	push	{r3, r4, r5, lr}
 *
 * \return The interrupt status value.
 */
static inline uint32_t adc_get_interrupt_status(Adc *const adc)
{
	return adc->ADC_ISR;
  400182:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((adc_get_interrupt_status(adc) & ADC_ISR_DRDY) == ADC_ISR_DRDY) {
  400184:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  400188:	d001      	beq.n	40018e <adc_init+0xe>
		return STATUS_ERR_BUSY;
  40018a:	2019      	movs	r0, #25
}
  40018c:	bd38      	pop	{r3, r4, r5, pc}
	adc->ADC_CR = ADC_CR_SWRST;
  40018e:	2201      	movs	r2, #1
  400190:	6002      	str	r2, [r0, #0]
	reg =  (config->useq ? ADC_MR_USEQ_REG_ORDER : 0) |
  400192:	7c8a      	ldrb	r2, [r1, #18]
  400194:	2a00      	cmp	r2, #0
  400196:	bf18      	it	ne
  400198:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
			ADC_MR_TRACKTIM(config->tracktim) |
  40019c:	7c0a      	ldrb	r2, [r1, #16]
  40019e:	0612      	lsls	r2, r2, #24
  4001a0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			ADC_MR_TRANSFER(config->transfer) |
  4001a4:	7c4c      	ldrb	r4, [r1, #17]
  4001a6:	0724      	lsls	r4, r4, #28
  4001a8:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg =  (config->useq ? ADC_MR_USEQ_REG_ORDER : 0) |
  4001ac:	4322      	orrs	r2, r4
  4001ae:	68cc      	ldr	r4, [r1, #12]
  4001b0:	4322      	orrs	r2, r4
			ADC_MR_PRESCAL(config->mck /
  4001b2:	688c      	ldr	r4, [r1, #8]
  4001b4:	0065      	lsls	r5, r4, #1
  4001b6:	684c      	ldr	r4, [r1, #4]
  4001b8:	fbb4 f4f5 	udiv	r4, r4, r5
  4001bc:	3c01      	subs	r4, #1
  4001be:	0224      	lsls	r4, r4, #8
  4001c0:	b2a4      	uxth	r4, r4
	reg =  (config->useq ? ADC_MR_USEQ_REG_ORDER : 0) |
  4001c2:	4322      	orrs	r2, r4
  4001c4:	4313      	orrs	r3, r2
	adc->ADC_MR = reg;
  4001c6:	6043      	str	r3, [r0, #4]
	adc->ADC_EMR = (config->tag ? ADC_EMR_TAG : 0) |
  4001c8:	7ccb      	ldrb	r3, [r1, #19]
  4001ca:	2b00      	cmp	r3, #0
  4001cc:	bf14      	ite	ne
  4001ce:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4001d2:	2300      	moveq	r3, #0
			(config->aste ? ADC_EMR_ASTE_SINGLE_TRIG_AVERAGE : 0);
  4001d4:	7d0a      	ldrb	r2, [r1, #20]
  4001d6:	2a00      	cmp	r2, #0
  4001d8:	bf14      	ite	ne
  4001da:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
  4001de:	2200      	moveq	r2, #0
	adc->ADC_EMR = (config->tag ? ADC_EMR_TAG : 0) |
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6403      	str	r3, [r0, #64]	; 0x40
	adc_set_resolution(adc, config->resolution);
  4001e4:	6809      	ldr	r1, [r1, #0]
  4001e6:	4b06      	ldr	r3, [pc, #24]	; (400200 <adc_init+0x80>)
  4001e8:	4798      	blx	r3
  4001ea:	4b06      	ldr	r3, [pc, #24]	; (400204 <adc_init+0x84>)
  4001ec:	f103 0160 	add.w	r1, r3, #96	; 0x60
		adc_callback_pointer[i] = 0;
  4001f0:	2200      	movs	r2, #0
  4001f2:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < ADC_NUM_OF_INTERRUPT_SOURCE; i++) {
  4001f6:	428b      	cmp	r3, r1
  4001f8:	d1fb      	bne.n	4001f2 <adc_init+0x72>
	return STATUS_OK;
  4001fa:	2000      	movs	r0, #0
  4001fc:	bd38      	pop	{r3, r4, r5, pc}
  4001fe:	bf00      	nop
  400200:	00400155 	.word	0x00400155
  400204:	200008b4 	.word	0x200008b4

00400208 <ADC_Handler>:

/**
 * \brief Interrupt handler for ADC.
 */
void ADC_Handler(void)
{
  400208:	b570      	push	{r4, r5, r6, lr}
  40020a:	b082      	sub	sp, #8
  40020c:	4b0b      	ldr	r3, [pc, #44]	; (40023c <ADC_Handler+0x34>)
  40020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	status = adc_get_interrupt_status(adc);
  400210:	9301      	str	r3, [sp, #4]
  400212:	4e0b      	ldr	r6, [pc, #44]	; (400240 <ADC_Handler+0x38>)
  400214:	1f34      	subs	r4, r6, #4
  400216:	4d0b      	ldr	r5, [pc, #44]	; (400244 <ADC_Handler+0x3c>)
  400218:	365c      	adds	r6, #92	; 0x5c
  40021a:	e002      	b.n	400222 <ADC_Handler+0x1a>
  40021c:	3504      	adds	r5, #4
	for (cnt = 0; cnt < ADC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40021e:	42b4      	cmp	r4, r6
  400220:	d009      	beq.n	400236 <ADC_Handler+0x2e>
		if (status & adc_interrupt_mask[cnt]) {
  400222:	9a01      	ldr	r2, [sp, #4]
  400224:	f854 3f04 	ldr.w	r3, [r4, #4]!
  400228:	421a      	tst	r2, r3
  40022a:	d0f7      	beq.n	40021c <ADC_Handler+0x14>
	if (adc_callback_pointer[source]) {
  40022c:	682b      	ldr	r3, [r5, #0]
  40022e:	2b00      	cmp	r3, #0
  400230:	d0f4      	beq.n	40021c <ADC_Handler+0x14>
		adc_callback_pointer[source]();
  400232:	4798      	blx	r3
  400234:	e7f2      	b.n	40021c <ADC_Handler+0x14>
	adc_process_callback(ADC);
}
  400236:	b002      	add	sp, #8
  400238:	bd70      	pop	{r4, r5, r6, pc}
  40023a:	bf00      	nop
  40023c:	40038000 	.word	0x40038000
  400240:	00401c5c 	.word	0x00401c5c
  400244:	200008b8 	.word	0x200008b8

00400248 <adc_enable>:
/**
 * \brief Enable ADC Module.
 *
 */
void adc_enable(void)
{
  400248:	b500      	push	{lr}
  40024a:	b083      	sub	sp, #12
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(ID_ADC);
  40024c:	201d      	movs	r0, #29
  40024e:	4b11      	ldr	r3, [pc, #68]	; (400294 <adc_enable+0x4c>)
  400250:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400252:	4b11      	ldr	r3, [pc, #68]	; (400298 <adc_enable+0x50>)
  400254:	789b      	ldrb	r3, [r3, #2]
  400256:	2bff      	cmp	r3, #255	; 0xff
  400258:	d01a      	beq.n	400290 <adc_enable+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40025a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40025e:	fab3 f383 	clz	r3, r3
  400262:	095b      	lsrs	r3, r3, #5
  400264:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400266:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400268:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40026c:	2200      	movs	r2, #0
  40026e:	4b0b      	ldr	r3, [pc, #44]	; (40029c <adc_enable+0x54>)
  400270:	701a      	strb	r2, [r3, #0]
	return flags;
  400272:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400274:	4a08      	ldr	r2, [pc, #32]	; (400298 <adc_enable+0x50>)
  400276:	7893      	ldrb	r3, [r2, #2]
  400278:	3301      	adds	r3, #1
  40027a:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40027c:	b129      	cbz	r1, 40028a <adc_enable+0x42>
		cpu_irq_enable();
  40027e:	2201      	movs	r2, #1
  400280:	4b06      	ldr	r3, [pc, #24]	; (40029c <adc_enable+0x54>)
  400282:	701a      	strb	r2, [r3, #0]
  400284:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400288:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEP_MODE_ADC);
}
  40028a:	b003      	add	sp, #12
  40028c:	f85d fb04 	ldr.w	pc, [sp], #4
  400290:	e7fe      	b.n	400290 <adc_enable+0x48>
  400292:	bf00      	nop
  400294:	0040058d 	.word	0x0040058d
  400298:	200008b0 	.word	0x200008b0
  40029c:	20000000 	.word	0x20000000

004002a0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002a4:	b980      	cbnz	r0, 4002c8 <_read+0x28>
  4002a6:	460c      	mov	r4, r1
  4002a8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002aa:	2a00      	cmp	r2, #0
  4002ac:	dd0f      	ble.n	4002ce <_read+0x2e>
  4002ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4002b0:	4e08      	ldr	r6, [pc, #32]	; (4002d4 <_read+0x34>)
  4002b2:	4d09      	ldr	r5, [pc, #36]	; (4002d8 <_read+0x38>)
  4002b4:	6830      	ldr	r0, [r6, #0]
  4002b6:	4621      	mov	r1, r4
  4002b8:	682b      	ldr	r3, [r5, #0]
  4002ba:	4798      	blx	r3
		ptr++;
  4002bc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4002be:	42bc      	cmp	r4, r7
  4002c0:	d1f8      	bne.n	4002b4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4002c2:	4640      	mov	r0, r8
  4002c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002c8:	f04f 38ff 	mov.w	r8, #4294967295
  4002cc:	e7f9      	b.n	4002c2 <_read+0x22>
	for (; len > 0; --len) {
  4002ce:	4680      	mov	r8, r0
  4002d0:	e7f7      	b.n	4002c2 <_read+0x22>
  4002d2:	bf00      	nop
  4002d4:	20000920 	.word	0x20000920
  4002d8:	20000918 	.word	0x20000918

004002dc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4002dc:	6943      	ldr	r3, [r0, #20]
  4002de:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4002e2:	bf1d      	ittte	ne
  4002e4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4002e8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4002ea:	2000      	movne	r0, #0
		return 1;
  4002ec:	2001      	moveq	r0, #1
}
  4002ee:	4770      	bx	lr

004002f0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4002f0:	6943      	ldr	r3, [r0, #20]
  4002f2:	f013 0f01 	tst.w	r3, #1
  4002f6:	d005      	beq.n	400304 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4002f8:	6983      	ldr	r3, [r0, #24]
  4002fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4002fe:	600b      	str	r3, [r1, #0]

	return 0;
  400300:	2000      	movs	r0, #0
  400302:	4770      	bx	lr
		return 1;
  400304:	2001      	movs	r0, #1
}
  400306:	4770      	bx	lr

00400308 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400308:	3801      	subs	r0, #1
  40030a:	2802      	cmp	r0, #2
  40030c:	d815      	bhi.n	40033a <_write+0x32>
{
  40030e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400312:	460e      	mov	r6, r1
  400314:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400316:	b19a      	cbz	r2, 400340 <_write+0x38>
  400318:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40031a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400354 <_write+0x4c>
  40031e:	4f0c      	ldr	r7, [pc, #48]	; (400350 <_write+0x48>)
  400320:	f8d8 0000 	ldr.w	r0, [r8]
  400324:	f815 1b01 	ldrb.w	r1, [r5], #1
  400328:	683b      	ldr	r3, [r7, #0]
  40032a:	4798      	blx	r3
  40032c:	2800      	cmp	r0, #0
  40032e:	db0a      	blt.n	400346 <_write+0x3e>
  400330:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400332:	3c01      	subs	r4, #1
  400334:	d1f4      	bne.n	400320 <_write+0x18>
  400336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40033a:	f04f 30ff 	mov.w	r0, #4294967295
  40033e:	4770      	bx	lr
	for (; len != 0; --len) {
  400340:	4610      	mov	r0, r2
  400342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400346:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40034e:	bf00      	nop
  400350:	2000091c 	.word	0x2000091c
  400354:	20000920 	.word	0x20000920

00400358 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
  400358:	2a00      	cmp	r2, #0
  40035a:	d061      	beq.n	400420 <usart_serial_read_packet+0xc8>
{
  40035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400360:	b083      	sub	sp, #12
  400362:	4606      	mov	r6, r0
  400364:	460c      	mov	r4, r1
  400366:	4693      	mov	fp, r2
  400368:	448b      	add	fp, r1
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40036a:	4f2e      	ldr	r7, [pc, #184]	; (400424 <usart_serial_read_packet+0xcc>)
		while (uart_read((Uart*)p_usart, data));
  40036c:	4d2e      	ldr	r5, [pc, #184]	; (400428 <usart_serial_read_packet+0xd0>)
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40036e:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 400440 <usart_serial_read_packet+0xe8>
  400372:	e026      	b.n	4003c2 <usart_serial_read_packet+0x6a>
		while (uart_read((Uart*)p_usart, data));
  400374:	4621      	mov	r1, r4
  400376:	4638      	mov	r0, r7
  400378:	47a8      	blx	r5
  40037a:	2800      	cmp	r0, #0
  40037c:	d1fa      	bne.n	400374 <usart_serial_read_packet+0x1c>
  40037e:	e029      	b.n	4003d4 <usart_serial_read_packet+0x7c>
		while (uart_read((Uart*)p_usart, data));
  400380:	4621      	mov	r1, r4
  400382:	4650      	mov	r0, sl
  400384:	47a8      	blx	r5
  400386:	2800      	cmp	r0, #0
  400388:	d1fa      	bne.n	400380 <usart_serial_read_packet+0x28>
  40038a:	e026      	b.n	4003da <usart_serial_read_packet+0x82>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  40038c:	4698      	mov	r8, r3
  40038e:	4621      	mov	r1, r4
  400390:	4640      	mov	r0, r8
  400392:	47a8      	blx	r5
  400394:	2800      	cmp	r0, #0
  400396:	d1fa      	bne.n	40038e <usart_serial_read_packet+0x36>
  400398:	e022      	b.n	4003e0 <usart_serial_read_packet+0x88>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  40039a:	4698      	mov	r8, r3
  40039c:	4621      	mov	r1, r4
  40039e:	4640      	mov	r0, r8
  4003a0:	47a8      	blx	r5
  4003a2:	2800      	cmp	r0, #0
  4003a4:	d1fa      	bne.n	40039c <usart_serial_read_packet+0x44>
  4003a6:	e01e      	b.n	4003e6 <usart_serial_read_packet+0x8e>
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_read(p_usart, &val));
  4003a8:	4699      	mov	r9, r3
  4003aa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 400444 <usart_serial_read_packet+0xec>
  4003ae:	a901      	add	r1, sp, #4
  4003b0:	4648      	mov	r0, r9
  4003b2:	47c0      	blx	r8
  4003b4:	2800      	cmp	r0, #0
  4003b6:	d1fa      	bne.n	4003ae <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
  4003b8:	9b01      	ldr	r3, [sp, #4]
  4003ba:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
  4003bc:	3401      	adds	r4, #1
	while (len) {
  4003be:	455c      	cmp	r4, fp
  4003c0:	d02a      	beq.n	400418 <usart_serial_read_packet+0xc0>
	uint32_t val = 0;
  4003c2:	2300      	movs	r3, #0
  4003c4:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  4003c6:	42be      	cmp	r6, r7
  4003c8:	d0d4      	beq.n	400374 <usart_serial_read_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4003ca:	4556      	cmp	r6, sl
  4003cc:	d0d8      	beq.n	400380 <usart_serial_read_packet+0x28>
	if (UART2 == (Uart*)p_usart) {
  4003ce:	4b17      	ldr	r3, [pc, #92]	; (40042c <usart_serial_read_packet+0xd4>)
  4003d0:	429e      	cmp	r6, r3
  4003d2:	d0db      	beq.n	40038c <usart_serial_read_packet+0x34>
	if (UART3 == (Uart*)p_usart) {
  4003d4:	4b16      	ldr	r3, [pc, #88]	; (400430 <usart_serial_read_packet+0xd8>)
  4003d6:	429e      	cmp	r6, r3
  4003d8:	d0df      	beq.n	40039a <usart_serial_read_packet+0x42>
	if (USART0 == p_usart) {
  4003da:	4b16      	ldr	r3, [pc, #88]	; (400434 <usart_serial_read_packet+0xdc>)
  4003dc:	429e      	cmp	r6, r3
  4003de:	d0e3      	beq.n	4003a8 <usart_serial_read_packet+0x50>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4003e0:	4b15      	ldr	r3, [pc, #84]	; (400438 <usart_serial_read_packet+0xe0>)
  4003e2:	429e      	cmp	r6, r3
  4003e4:	d00d      	beq.n	400402 <usart_serial_read_packet+0xaa>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4003e6:	4b15      	ldr	r3, [pc, #84]	; (40043c <usart_serial_read_packet+0xe4>)
  4003e8:	429e      	cmp	r6, r3
  4003ea:	d1e7      	bne.n	4003bc <usart_serial_read_packet+0x64>
		while (usart_read(p_usart, &val));
  4003ec:	4699      	mov	r9, r3
  4003ee:	f8df 8054 	ldr.w	r8, [pc, #84]	; 400444 <usart_serial_read_packet+0xec>
  4003f2:	a901      	add	r1, sp, #4
  4003f4:	4648      	mov	r0, r9
  4003f6:	47c0      	blx	r8
  4003f8:	2800      	cmp	r0, #0
  4003fa:	d1fa      	bne.n	4003f2 <usart_serial_read_packet+0x9a>
		*data = (uint8_t)(val & 0xFF);
  4003fc:	9b01      	ldr	r3, [sp, #4]
  4003fe:	7023      	strb	r3, [r4, #0]
  400400:	e7dc      	b.n	4003bc <usart_serial_read_packet+0x64>
		while (usart_read(p_usart, &val));
  400402:	4699      	mov	r9, r3
  400404:	f8df 803c 	ldr.w	r8, [pc, #60]	; 400444 <usart_serial_read_packet+0xec>
  400408:	a901      	add	r1, sp, #4
  40040a:	4648      	mov	r0, r9
  40040c:	47c0      	blx	r8
  40040e:	2800      	cmp	r0, #0
  400410:	d1fa      	bne.n	400408 <usart_serial_read_packet+0xb0>
		*data = (uint8_t)(val & 0xFF);
  400412:	9b01      	ldr	r3, [sp, #4]
  400414:	7023      	strb	r3, [r4, #0]
  400416:	e7d1      	b.n	4003bc <usart_serial_read_packet+0x64>
	}
	return STATUS_OK;
}
  400418:	2000      	movs	r0, #0
  40041a:	b003      	add	sp, #12
  40041c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400420:	2000      	movs	r0, #0
  400422:	4770      	bx	lr
  400424:	400e0600 	.word	0x400e0600
  400428:	004005ff 	.word	0x004005ff
  40042c:	40044000 	.word	0x40044000
  400430:	40048000 	.word	0x40048000
  400434:	40024000 	.word	0x40024000
  400438:	40028000 	.word	0x40028000
  40043c:	4002c000 	.word	0x4002c000
  400440:	400e0800 	.word	0x400e0800
  400444:	004002f1 	.word	0x004002f1

00400448 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400448:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40044a:	480e      	ldr	r0, [pc, #56]	; (400484 <sysclk_init+0x3c>)
  40044c:	4b0e      	ldr	r3, [pc, #56]	; (400488 <sysclk_init+0x40>)
  40044e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400450:	2010      	movs	r0, #16
  400452:	4b0e      	ldr	r3, [pc, #56]	; (40048c <sysclk_init+0x44>)
  400454:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400456:	4c0e      	ldr	r4, [pc, #56]	; (400490 <sysclk_init+0x48>)
  400458:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40045a:	2800      	cmp	r0, #0
  40045c:	d0fc      	beq.n	400458 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40045e:	4b0d      	ldr	r3, [pc, #52]	; (400494 <sysclk_init+0x4c>)
  400460:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400462:	4a0d      	ldr	r2, [pc, #52]	; (400498 <sysclk_init+0x50>)
  400464:	4b0d      	ldr	r3, [pc, #52]	; (40049c <sysclk_init+0x54>)
  400466:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400468:	4c0d      	ldr	r4, [pc, #52]	; (4004a0 <sysclk_init+0x58>)
  40046a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40046c:	2800      	cmp	r0, #0
  40046e:	d0fc      	beq.n	40046a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400470:	2010      	movs	r0, #16
  400472:	4b0c      	ldr	r3, [pc, #48]	; (4004a4 <sysclk_init+0x5c>)
  400474:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <sysclk_init+0x60>)
  400478:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40047a:	4802      	ldr	r0, [pc, #8]	; (400484 <sysclk_init+0x3c>)
  40047c:	4b02      	ldr	r3, [pc, #8]	; (400488 <sysclk_init+0x40>)
  40047e:	4798      	blx	r3
  400480:	bd10      	pop	{r4, pc}
  400482:	bf00      	nop
  400484:	05f5e100 	.word	0x05f5e100
  400488:	00400809 	.word	0x00400809
  40048c:	00400511 	.word	0x00400511
  400490:	0040055d 	.word	0x0040055d
  400494:	0040056d 	.word	0x0040056d
  400498:	20183f01 	.word	0x20183f01
  40049c:	400e0400 	.word	0x400e0400
  4004a0:	0040057d 	.word	0x0040057d
  4004a4:	004004ad 	.word	0x004004ad
  4004a8:	004006fd 	.word	0x004006fd

004004ac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4004ac:	4a17      	ldr	r2, [pc, #92]	; (40050c <pmc_switch_mck_to_pllack+0x60>)
  4004ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004b4:	4318      	orrs	r0, r3
  4004b6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004ba:	f013 0f08 	tst.w	r3, #8
  4004be:	d10a      	bne.n	4004d6 <pmc_switch_mck_to_pllack+0x2a>
  4004c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004c4:	4911      	ldr	r1, [pc, #68]	; (40050c <pmc_switch_mck_to_pllack+0x60>)
  4004c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004c8:	f012 0f08 	tst.w	r2, #8
  4004cc:	d103      	bne.n	4004d6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004ce:	3b01      	subs	r3, #1
  4004d0:	d1f9      	bne.n	4004c6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4004d2:	2001      	movs	r0, #1
  4004d4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004d6:	4a0d      	ldr	r2, [pc, #52]	; (40050c <pmc_switch_mck_to_pllack+0x60>)
  4004d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004da:	f023 0303 	bic.w	r3, r3, #3
  4004de:	f043 0302 	orr.w	r3, r3, #2
  4004e2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004e6:	f013 0f08 	tst.w	r3, #8
  4004ea:	d10a      	bne.n	400502 <pmc_switch_mck_to_pllack+0x56>
  4004ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004f0:	4906      	ldr	r1, [pc, #24]	; (40050c <pmc_switch_mck_to_pllack+0x60>)
  4004f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004f4:	f012 0f08 	tst.w	r2, #8
  4004f8:	d105      	bne.n	400506 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004fa:	3b01      	subs	r3, #1
  4004fc:	d1f9      	bne.n	4004f2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4004fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400500:	4770      	bx	lr
	return 0;
  400502:	2000      	movs	r0, #0
  400504:	4770      	bx	lr
  400506:	2000      	movs	r0, #0
  400508:	4770      	bx	lr
  40050a:	bf00      	nop
  40050c:	400e0400 	.word	0x400e0400

00400510 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400510:	4911      	ldr	r1, [pc, #68]	; (400558 <pmc_switch_mainck_to_fastrc+0x48>)
  400512:	6a0a      	ldr	r2, [r1, #32]
  400514:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  400518:	f042 0208 	orr.w	r2, r2, #8
  40051c:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40051e:	460a      	mov	r2, r1
  400520:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400522:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400526:	d0fb      	beq.n	400520 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400528:	4a0b      	ldr	r2, [pc, #44]	; (400558 <pmc_switch_mainck_to_fastrc+0x48>)
  40052a:	6a13      	ldr	r3, [r2, #32]
  40052c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400534:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400538:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40053a:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40053c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40053e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400542:	d0fb      	beq.n	40053c <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400544:	4a04      	ldr	r2, [pc, #16]	; (400558 <pmc_switch_mainck_to_fastrc+0x48>)
  400546:	6a13      	ldr	r3, [r2, #32]
  400548:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40054c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400550:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400554:	6213      	str	r3, [r2, #32]
  400556:	4770      	bx	lr
  400558:	400e0400 	.word	0x400e0400

0040055c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40055c:	4b02      	ldr	r3, [pc, #8]	; (400568 <pmc_osc_is_ready_mainck+0xc>)
  40055e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400560:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400564:	4770      	bx	lr
  400566:	bf00      	nop
  400568:	400e0400 	.word	0x400e0400

0040056c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40056c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400570:	4b01      	ldr	r3, [pc, #4]	; (400578 <pmc_disable_pllack+0xc>)
  400572:	629a      	str	r2, [r3, #40]	; 0x28
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	400e0400 	.word	0x400e0400

0040057c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40057c:	4b02      	ldr	r3, [pc, #8]	; (400588 <pmc_is_locked_pllack+0xc>)
  40057e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400580:	f000 0002 	and.w	r0, r0, #2
  400584:	4770      	bx	lr
  400586:	bf00      	nop
  400588:	400e0400 	.word	0x400e0400

0040058c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40058c:	281f      	cmp	r0, #31
  40058e:	d80c      	bhi.n	4005aa <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400590:	4b08      	ldr	r3, [pc, #32]	; (4005b4 <pmc_enable_periph_clk+0x28>)
  400592:	699a      	ldr	r2, [r3, #24]
  400594:	2301      	movs	r3, #1
  400596:	4083      	lsls	r3, r0
  400598:	4393      	bics	r3, r2
  40059a:	d008      	beq.n	4005ae <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
  40059c:	2301      	movs	r3, #1
  40059e:	fa03 f000 	lsl.w	r0, r3, r0
  4005a2:	4b04      	ldr	r3, [pc, #16]	; (4005b4 <pmc_enable_periph_clk+0x28>)
  4005a4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005a6:	2000      	movs	r0, #0
  4005a8:	4770      	bx	lr
		return 1;
  4005aa:	2001      	movs	r0, #1
  4005ac:	4770      	bx	lr
	return 0;
  4005ae:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop
  4005b4:	400e0400 	.word	0x400e0400

004005b8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4005b8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4005ba:	23ac      	movs	r3, #172	; 0xac
  4005bc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4005be:	680b      	ldr	r3, [r1, #0]
  4005c0:	684a      	ldr	r2, [r1, #4]
  4005c2:	fbb3 f3f2 	udiv	r3, r3, r2
  4005c6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4005c8:	1e5c      	subs	r4, r3, #1
  4005ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4005ce:	4294      	cmp	r4, r2
  4005d0:	d80b      	bhi.n	4005ea <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4005d2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4005d4:	688b      	ldr	r3, [r1, #8]
  4005d6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4005d8:	f240 2302 	movw	r3, #514	; 0x202
  4005dc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4005e0:	2350      	movs	r3, #80	; 0x50
  4005e2:	6003      	str	r3, [r0, #0]

	return 0;
  4005e4:	2000      	movs	r0, #0
}
  4005e6:	bc10      	pop	{r4}
  4005e8:	4770      	bx	lr
		return 1;
  4005ea:	2001      	movs	r0, #1
  4005ec:	e7fb      	b.n	4005e6 <uart_init+0x2e>

004005ee <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4005ee:	6943      	ldr	r3, [r0, #20]
  4005f0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4005f4:	bf1a      	itte	ne
  4005f6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4005f8:	2000      	movne	r0, #0
		return 1;
  4005fa:	2001      	moveq	r0, #1
}
  4005fc:	4770      	bx	lr

004005fe <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4005fe:	6943      	ldr	r3, [r0, #20]
  400600:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400604:	bf1d      	ittte	ne
  400606:	6983      	ldrne	r3, [r0, #24]
  400608:	700b      	strbne	r3, [r1, #0]
	return 0;
  40060a:	2000      	movne	r0, #0
		return 1;
  40060c:	2001      	moveq	r0, #1
}
  40060e:	4770      	bx	lr

00400610 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  400610:	b510      	push	{r4, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	WDT->WDT_MR = WDT_MR_WDDIS;                    // disable watchdog
  400612:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400616:	4b14      	ldr	r3, [pc, #80]	; (400668 <board_init+0x58>)
  400618:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40061a:	200b      	movs	r0, #11
  40061c:	4c13      	ldr	r4, [pc, #76]	; (40066c <board_init+0x5c>)
  40061e:	47a0      	blx	r4
  400620:	200c      	movs	r0, #12
  400622:	47a0      	blx	r4
  400624:	200d      	movs	r0, #13
  400626:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400628:	4b11      	ldr	r3, [pc, #68]	; (400670 <board_init+0x60>)
  40062a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40062e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400630:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400634:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  400638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40063c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40063e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400642:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  400646:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40064c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40064e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400654:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400656:	f421 01c0 	bic.w	r1, r1, #6291456	; 0x600000
  40065a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40065c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40065e:	f421 01c0 	bic.w	r1, r1, #6291456	; 0x600000
  400662:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400664:	605a      	str	r2, [r3, #4]
  400666:	bd10      	pop	{r4, pc}
  400668:	400e1450 	.word	0x400e1450
  40066c:	0040058d 	.word	0x0040058d
  400670:	400e1000 	.word	0x400e1000

00400674 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400674:	e7fe      	b.n	400674 <Dummy_Handler>
	...

00400678 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400678:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40067a:	4b17      	ldr	r3, [pc, #92]	; (4006d8 <Reset_Handler+0x60>)
  40067c:	4a17      	ldr	r2, [pc, #92]	; (4006dc <Reset_Handler+0x64>)
  40067e:	429a      	cmp	r2, r3
  400680:	d010      	beq.n	4006a4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
  400682:	4b17      	ldr	r3, [pc, #92]	; (4006e0 <Reset_Handler+0x68>)
  400684:	4a14      	ldr	r2, [pc, #80]	; (4006d8 <Reset_Handler+0x60>)
  400686:	429a      	cmp	r2, r3
  400688:	d20c      	bcs.n	4006a4 <Reset_Handler+0x2c>
  40068a:	3b01      	subs	r3, #1
  40068c:	1a9b      	subs	r3, r3, r2
  40068e:	f023 0303 	bic.w	r3, r3, #3
  400692:	3304      	adds	r3, #4
  400694:	4413      	add	r3, r2
  400696:	4911      	ldr	r1, [pc, #68]	; (4006dc <Reset_Handler+0x64>)
			*pDest++ = *pSrc++;
  400698:	f851 0b04 	ldr.w	r0, [r1], #4
  40069c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4006a0:	429a      	cmp	r2, r3
  4006a2:	d1f9      	bne.n	400698 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4006a4:	4b0f      	ldr	r3, [pc, #60]	; (4006e4 <Reset_Handler+0x6c>)
  4006a6:	4a10      	ldr	r2, [pc, #64]	; (4006e8 <Reset_Handler+0x70>)
  4006a8:	429a      	cmp	r2, r3
  4006aa:	d20a      	bcs.n	4006c2 <Reset_Handler+0x4a>
  4006ac:	3b01      	subs	r3, #1
  4006ae:	1a9b      	subs	r3, r3, r2
  4006b0:	f023 0303 	bic.w	r3, r3, #3
  4006b4:	3304      	adds	r3, #4
  4006b6:	4413      	add	r3, r2
		*pDest++ = 0;
  4006b8:	2100      	movs	r1, #0
  4006ba:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4006be:	4293      	cmp	r3, r2
  4006c0:	d1fb      	bne.n	4006ba <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4006c2:	4a0a      	ldr	r2, [pc, #40]	; (4006ec <Reset_Handler+0x74>)
  4006c4:	4b0a      	ldr	r3, [pc, #40]	; (4006f0 <Reset_Handler+0x78>)
  4006c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4006ca:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4006cc:	4b09      	ldr	r3, [pc, #36]	; (4006f4 <Reset_Handler+0x7c>)
  4006ce:	4798      	blx	r3

	/* Branch to main function */
	main();
  4006d0:	4b09      	ldr	r3, [pc, #36]	; (4006f8 <Reset_Handler+0x80>)
  4006d2:	4798      	blx	r3
  4006d4:	e7fe      	b.n	4006d4 <Reset_Handler+0x5c>
  4006d6:	bf00      	nop
  4006d8:	20000000 	.word	0x20000000
  4006dc:	00401ce4 	.word	0x00401ce4
  4006e0:	2000085c 	.word	0x2000085c
  4006e4:	2000094c 	.word	0x2000094c
  4006e8:	2000085c 	.word	0x2000085c
  4006ec:	e000ed00 	.word	0xe000ed00
  4006f0:	00400000 	.word	0x00400000
  4006f4:	00400b65 	.word	0x00400b65
  4006f8:	00400a65 	.word	0x00400a65

004006fc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4006fc:	4b3b      	ldr	r3, [pc, #236]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  4006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400700:	f003 0303 	and.w	r3, r3, #3
  400704:	2b01      	cmp	r3, #1
  400706:	d01d      	beq.n	400744 <SystemCoreClockUpdate+0x48>
  400708:	b183      	cbz	r3, 40072c <SystemCoreClockUpdate+0x30>
  40070a:	2b02      	cmp	r3, #2
  40070c:	d036      	beq.n	40077c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40070e:	4b37      	ldr	r3, [pc, #220]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  400710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400712:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400716:	2b70      	cmp	r3, #112	; 0x70
  400718:	d05f      	beq.n	4007da <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40071a:	4b34      	ldr	r3, [pc, #208]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  40071c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40071e:	4934      	ldr	r1, [pc, #208]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  400720:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400724:	680b      	ldr	r3, [r1, #0]
  400726:	40d3      	lsrs	r3, r2
  400728:	600b      	str	r3, [r1, #0]
  40072a:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  40072c:	4b31      	ldr	r3, [pc, #196]	; (4007f4 <SystemCoreClockUpdate+0xf8>)
  40072e:	695b      	ldr	r3, [r3, #20]
  400730:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400734:	bf14      	ite	ne
  400736:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40073a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40073e:	4b2c      	ldr	r3, [pc, #176]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  400740:	601a      	str	r2, [r3, #0]
  400742:	e7e4      	b.n	40070e <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400744:	4b29      	ldr	r3, [pc, #164]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  400746:	6a1b      	ldr	r3, [r3, #32]
  400748:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40074c:	d003      	beq.n	400756 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40074e:	4a2a      	ldr	r2, [pc, #168]	; (4007f8 <SystemCoreClockUpdate+0xfc>)
  400750:	4b27      	ldr	r3, [pc, #156]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  400752:	601a      	str	r2, [r3, #0]
  400754:	e7db      	b.n	40070e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400756:	4a29      	ldr	r2, [pc, #164]	; (4007fc <SystemCoreClockUpdate+0x100>)
  400758:	4b25      	ldr	r3, [pc, #148]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  40075a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40075c:	4b23      	ldr	r3, [pc, #140]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  40075e:	6a1b      	ldr	r3, [r3, #32]
  400760:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400764:	2b10      	cmp	r3, #16
  400766:	d005      	beq.n	400774 <SystemCoreClockUpdate+0x78>
  400768:	2b20      	cmp	r3, #32
  40076a:	d1d0      	bne.n	40070e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  40076c:	4a22      	ldr	r2, [pc, #136]	; (4007f8 <SystemCoreClockUpdate+0xfc>)
  40076e:	4b20      	ldr	r3, [pc, #128]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  400770:	601a      	str	r2, [r3, #0]
				break;
  400772:	e7cc      	b.n	40070e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400774:	4a22      	ldr	r2, [pc, #136]	; (400800 <SystemCoreClockUpdate+0x104>)
  400776:	4b1e      	ldr	r3, [pc, #120]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  400778:	601a      	str	r2, [r3, #0]
				break;
  40077a:	e7c8      	b.n	40070e <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40077c:	4b1b      	ldr	r3, [pc, #108]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  40077e:	6a1b      	ldr	r3, [r3, #32]
  400780:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400784:	d016      	beq.n	4007b4 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400786:	4a1c      	ldr	r2, [pc, #112]	; (4007f8 <SystemCoreClockUpdate+0xfc>)
  400788:	4b19      	ldr	r3, [pc, #100]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  40078a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40078c:	4b17      	ldr	r3, [pc, #92]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  40078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400790:	f003 0303 	and.w	r3, r3, #3
  400794:	2b02      	cmp	r3, #2
  400796:	d1ba      	bne.n	40070e <SystemCoreClockUpdate+0x12>
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400798:	4a14      	ldr	r2, [pc, #80]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  40079a:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40079c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40079e:	4814      	ldr	r0, [pc, #80]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
  4007a0:	f3c1 410a 	ubfx	r1, r1, #16, #11
			SystemCoreClock *=
  4007a4:	6803      	ldr	r3, [r0, #0]
  4007a6:	fb01 3303 	mla	r3, r1, r3, r3
					>> CKGR_PLLAR_DIVA_Pos));
  4007aa:	b2d2      	uxtb	r2, r2
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4007ac:	fbb3 f3f2 	udiv	r3, r3, r2
  4007b0:	6003      	str	r3, [r0, #0]
  4007b2:	e7ac      	b.n	40070e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4007b4:	4a11      	ldr	r2, [pc, #68]	; (4007fc <SystemCoreClockUpdate+0x100>)
  4007b6:	4b0e      	ldr	r3, [pc, #56]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  4007b8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4007ba:	4b0c      	ldr	r3, [pc, #48]	; (4007ec <SystemCoreClockUpdate+0xf0>)
  4007bc:	6a1b      	ldr	r3, [r3, #32]
  4007be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007c2:	2b10      	cmp	r3, #16
  4007c4:	d005      	beq.n	4007d2 <SystemCoreClockUpdate+0xd6>
  4007c6:	2b20      	cmp	r3, #32
  4007c8:	d1e0      	bne.n	40078c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4007ca:	4a0b      	ldr	r2, [pc, #44]	; (4007f8 <SystemCoreClockUpdate+0xfc>)
  4007cc:	4b08      	ldr	r3, [pc, #32]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  4007ce:	601a      	str	r2, [r3, #0]
				break;
  4007d0:	e7dc      	b.n	40078c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4007d2:	4a0b      	ldr	r2, [pc, #44]	; (400800 <SystemCoreClockUpdate+0x104>)
  4007d4:	4b06      	ldr	r3, [pc, #24]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  4007d6:	601a      	str	r2, [r3, #0]
				break;
  4007d8:	e7d8      	b.n	40078c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4007da:	4a05      	ldr	r2, [pc, #20]	; (4007f0 <SystemCoreClockUpdate+0xf4>)
  4007dc:	6813      	ldr	r3, [r2, #0]
  4007de:	4909      	ldr	r1, [pc, #36]	; (400804 <SystemCoreClockUpdate+0x108>)
  4007e0:	fba1 1303 	umull	r1, r3, r1, r3
  4007e4:	085b      	lsrs	r3, r3, #1
  4007e6:	6013      	str	r3, [r2, #0]
  4007e8:	4770      	bx	lr
  4007ea:	bf00      	nop
  4007ec:	400e0400 	.word	0x400e0400
  4007f0:	20000004 	.word	0x20000004
  4007f4:	400e1410 	.word	0x400e1410
  4007f8:	00b71b00 	.word	0x00b71b00
  4007fc:	003d0900 	.word	0x003d0900
  400800:	007a1200 	.word	0x007a1200
  400804:	aaaaaaab 	.word	0xaaaaaaab

00400808 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400808:	4b0f      	ldr	r3, [pc, #60]	; (400848 <system_init_flash+0x40>)
  40080a:	4298      	cmp	r0, r3
  40080c:	d90e      	bls.n	40082c <system_init_flash+0x24>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40080e:	4b0f      	ldr	r3, [pc, #60]	; (40084c <system_init_flash+0x44>)
  400810:	4298      	cmp	r0, r3
  400812:	d910      	bls.n	400836 <system_init_flash+0x2e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400814:	4b0e      	ldr	r3, [pc, #56]	; (400850 <system_init_flash+0x48>)
  400816:	4298      	cmp	r0, r3
  400818:	d911      	bls.n	40083e <system_init_flash+0x36>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  40081a:	4b0e      	ldr	r3, [pc, #56]	; (400854 <system_init_flash+0x4c>)
  40081c:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40081e:	bf94      	ite	ls
  400820:	4a0d      	ldrls	r2, [pc, #52]	; (400858 <system_init_flash+0x50>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400822:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  400826:	4b0d      	ldr	r3, [pc, #52]	; (40085c <system_init_flash+0x54>)
  400828:	601a      	str	r2, [r3, #0]
  40082a:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40082c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400830:	4b0a      	ldr	r3, [pc, #40]	; (40085c <system_init_flash+0x54>)
  400832:	601a      	str	r2, [r3, #0]
  400834:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400836:	4a0a      	ldr	r2, [pc, #40]	; (400860 <system_init_flash+0x58>)
  400838:	4b08      	ldr	r3, [pc, #32]	; (40085c <system_init_flash+0x54>)
  40083a:	601a      	str	r2, [r3, #0]
  40083c:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40083e:	4a09      	ldr	r2, [pc, #36]	; (400864 <system_init_flash+0x5c>)
  400840:	4b06      	ldr	r3, [pc, #24]	; (40085c <system_init_flash+0x54>)
  400842:	601a      	str	r2, [r3, #0]
  400844:	4770      	bx	lr
  400846:	bf00      	nop
  400848:	01312cff 	.word	0x01312cff
  40084c:	026259ff 	.word	0x026259ff
  400850:	039386ff 	.word	0x039386ff
  400854:	04c4b3ff 	.word	0x04c4b3ff
  400858:	04000300 	.word	0x04000300
  40085c:	400e0a00 	.word	0x400e0a00
  400860:	04000100 	.word	0x04000100
  400864:	04000200 	.word	0x04000200

00400868 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400868:	4b0a      	ldr	r3, [pc, #40]	; (400894 <_sbrk+0x2c>)
  40086a:	681b      	ldr	r3, [r3, #0]
  40086c:	b153      	cbz	r3, 400884 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40086e:	4b09      	ldr	r3, [pc, #36]	; (400894 <_sbrk+0x2c>)
  400870:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400872:	181a      	adds	r2, r3, r0
  400874:	4908      	ldr	r1, [pc, #32]	; (400898 <_sbrk+0x30>)
  400876:	4291      	cmp	r1, r2
  400878:	db08      	blt.n	40088c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40087a:	4610      	mov	r0, r2
  40087c:	4a05      	ldr	r2, [pc, #20]	; (400894 <_sbrk+0x2c>)
  40087e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400880:	4618      	mov	r0, r3
  400882:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400884:	4a05      	ldr	r2, [pc, #20]	; (40089c <_sbrk+0x34>)
  400886:	4b03      	ldr	r3, [pc, #12]	; (400894 <_sbrk+0x2c>)
  400888:	601a      	str	r2, [r3, #0]
  40088a:	e7f0      	b.n	40086e <_sbrk+0x6>
		return (caddr_t) -1;	
  40088c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400890:	4770      	bx	lr
  400892:	bf00      	nop
  400894:	20000878 	.word	0x20000878
  400898:	20013ffc 	.word	0x20013ffc
  40089c:	20003950 	.word	0x20003950

004008a0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4008a0:	f04f 30ff 	mov.w	r0, #4294967295
  4008a4:	4770      	bx	lr

004008a6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4008a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4008aa:	604b      	str	r3, [r1, #4]

	return 0;
}
  4008ac:	2000      	movs	r0, #0
  4008ae:	4770      	bx	lr

004008b0 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4008b0:	2000      	movs	r0, #0
  4008b2:	4770      	bx	lr

004008b4 <usart_serial_getchar>:
{
  4008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4008b6:	b083      	sub	sp, #12
  4008b8:	4605      	mov	r5, r0
  4008ba:	460c      	mov	r4, r1
	uint32_t val = 0;
  4008bc:	2300      	movs	r3, #0
  4008be:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  4008c0:	4b2a      	ldr	r3, [pc, #168]	; (40096c <usart_serial_getchar+0xb8>)
  4008c2:	4298      	cmp	r0, r3
  4008c4:	d013      	beq.n	4008ee <usart_serial_getchar+0x3a>
	if (UART1 == (Uart*)p_usart) {
  4008c6:	4b2a      	ldr	r3, [pc, #168]	; (400970 <usart_serial_getchar+0xbc>)
  4008c8:	4298      	cmp	r0, r3
  4008ca:	d018      	beq.n	4008fe <usart_serial_getchar+0x4a>
	if (UART2 == (Uart*)p_usart) {
  4008cc:	4b29      	ldr	r3, [pc, #164]	; (400974 <usart_serial_getchar+0xc0>)
  4008ce:	4298      	cmp	r0, r3
  4008d0:	d01d      	beq.n	40090e <usart_serial_getchar+0x5a>
	if (UART3 == (Uart*)p_usart) {
  4008d2:	4b29      	ldr	r3, [pc, #164]	; (400978 <usart_serial_getchar+0xc4>)
  4008d4:	429d      	cmp	r5, r3
  4008d6:	d022      	beq.n	40091e <usart_serial_getchar+0x6a>
	if (USART0 == p_usart) {
  4008d8:	4b28      	ldr	r3, [pc, #160]	; (40097c <usart_serial_getchar+0xc8>)
  4008da:	429d      	cmp	r5, r3
  4008dc:	d027      	beq.n	40092e <usart_serial_getchar+0x7a>
	if (USART1 == p_usart) {
  4008de:	4b28      	ldr	r3, [pc, #160]	; (400980 <usart_serial_getchar+0xcc>)
  4008e0:	429d      	cmp	r5, r3
  4008e2:	d02e      	beq.n	400942 <usart_serial_getchar+0x8e>
	if (USART2 == p_usart) {
  4008e4:	4b27      	ldr	r3, [pc, #156]	; (400984 <usart_serial_getchar+0xd0>)
  4008e6:	429d      	cmp	r5, r3
  4008e8:	d035      	beq.n	400956 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4008ea:	b003      	add	sp, #12
  4008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4008ee:	461f      	mov	r7, r3
  4008f0:	4e25      	ldr	r6, [pc, #148]	; (400988 <usart_serial_getchar+0xd4>)
  4008f2:	4621      	mov	r1, r4
  4008f4:	4638      	mov	r0, r7
  4008f6:	47b0      	blx	r6
  4008f8:	2800      	cmp	r0, #0
  4008fa:	d1fa      	bne.n	4008f2 <usart_serial_getchar+0x3e>
  4008fc:	e7e9      	b.n	4008d2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4008fe:	461f      	mov	r7, r3
  400900:	4e21      	ldr	r6, [pc, #132]	; (400988 <usart_serial_getchar+0xd4>)
  400902:	4621      	mov	r1, r4
  400904:	4638      	mov	r0, r7
  400906:	47b0      	blx	r6
  400908:	2800      	cmp	r0, #0
  40090a:	d1fa      	bne.n	400902 <usart_serial_getchar+0x4e>
  40090c:	e7e4      	b.n	4008d8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40090e:	461f      	mov	r7, r3
  400910:	4e1d      	ldr	r6, [pc, #116]	; (400988 <usart_serial_getchar+0xd4>)
  400912:	4621      	mov	r1, r4
  400914:	4638      	mov	r0, r7
  400916:	47b0      	blx	r6
  400918:	2800      	cmp	r0, #0
  40091a:	d1fa      	bne.n	400912 <usart_serial_getchar+0x5e>
  40091c:	e7df      	b.n	4008de <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40091e:	461f      	mov	r7, r3
  400920:	4e19      	ldr	r6, [pc, #100]	; (400988 <usart_serial_getchar+0xd4>)
  400922:	4621      	mov	r1, r4
  400924:	4638      	mov	r0, r7
  400926:	47b0      	blx	r6
  400928:	2800      	cmp	r0, #0
  40092a:	d1fa      	bne.n	400922 <usart_serial_getchar+0x6e>
  40092c:	e7da      	b.n	4008e4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40092e:	461e      	mov	r6, r3
  400930:	4d16      	ldr	r5, [pc, #88]	; (40098c <usart_serial_getchar+0xd8>)
  400932:	a901      	add	r1, sp, #4
  400934:	4630      	mov	r0, r6
  400936:	47a8      	blx	r5
  400938:	2800      	cmp	r0, #0
  40093a:	d1fa      	bne.n	400932 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40093c:	9b01      	ldr	r3, [sp, #4]
  40093e:	7023      	strb	r3, [r4, #0]
  400940:	e7d3      	b.n	4008ea <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400942:	461e      	mov	r6, r3
  400944:	4d11      	ldr	r5, [pc, #68]	; (40098c <usart_serial_getchar+0xd8>)
  400946:	a901      	add	r1, sp, #4
  400948:	4630      	mov	r0, r6
  40094a:	47a8      	blx	r5
  40094c:	2800      	cmp	r0, #0
  40094e:	d1fa      	bne.n	400946 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400950:	9b01      	ldr	r3, [sp, #4]
  400952:	7023      	strb	r3, [r4, #0]
  400954:	e7c9      	b.n	4008ea <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400956:	461e      	mov	r6, r3
  400958:	4d0c      	ldr	r5, [pc, #48]	; (40098c <usart_serial_getchar+0xd8>)
  40095a:	a901      	add	r1, sp, #4
  40095c:	4630      	mov	r0, r6
  40095e:	47a8      	blx	r5
  400960:	2800      	cmp	r0, #0
  400962:	d1fa      	bne.n	40095a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400964:	9b01      	ldr	r3, [sp, #4]
  400966:	7023      	strb	r3, [r4, #0]
}
  400968:	e7bf      	b.n	4008ea <usart_serial_getchar+0x36>
  40096a:	bf00      	nop
  40096c:	400e0600 	.word	0x400e0600
  400970:	400e0800 	.word	0x400e0800
  400974:	40044000 	.word	0x40044000
  400978:	40048000 	.word	0x40048000
  40097c:	40024000 	.word	0x40024000
  400980:	40028000 	.word	0x40028000
  400984:	4002c000 	.word	0x4002c000
  400988:	004005ff 	.word	0x004005ff
  40098c:	004002f1 	.word	0x004002f1

00400990 <usart_serial_putchar>:
{
  400990:	b570      	push	{r4, r5, r6, lr}
  400992:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400994:	4b2a      	ldr	r3, [pc, #168]	; (400a40 <usart_serial_putchar+0xb0>)
  400996:	4298      	cmp	r0, r3
  400998:	d013      	beq.n	4009c2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40099a:	4b2a      	ldr	r3, [pc, #168]	; (400a44 <usart_serial_putchar+0xb4>)
  40099c:	4298      	cmp	r0, r3
  40099e:	d019      	beq.n	4009d4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4009a0:	4b29      	ldr	r3, [pc, #164]	; (400a48 <usart_serial_putchar+0xb8>)
  4009a2:	4298      	cmp	r0, r3
  4009a4:	d01f      	beq.n	4009e6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4009a6:	4b29      	ldr	r3, [pc, #164]	; (400a4c <usart_serial_putchar+0xbc>)
  4009a8:	4298      	cmp	r0, r3
  4009aa:	d025      	beq.n	4009f8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4009ac:	4b28      	ldr	r3, [pc, #160]	; (400a50 <usart_serial_putchar+0xc0>)
  4009ae:	4298      	cmp	r0, r3
  4009b0:	d02b      	beq.n	400a0a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4009b2:	4b28      	ldr	r3, [pc, #160]	; (400a54 <usart_serial_putchar+0xc4>)
  4009b4:	4298      	cmp	r0, r3
  4009b6:	d031      	beq.n	400a1c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4009b8:	4b27      	ldr	r3, [pc, #156]	; (400a58 <usart_serial_putchar+0xc8>)
  4009ba:	4298      	cmp	r0, r3
  4009bc:	d037      	beq.n	400a2e <usart_serial_putchar+0x9e>
	return 0;
  4009be:	2000      	movs	r0, #0
}
  4009c0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009c2:	461e      	mov	r6, r3
  4009c4:	4d25      	ldr	r5, [pc, #148]	; (400a5c <usart_serial_putchar+0xcc>)
  4009c6:	4621      	mov	r1, r4
  4009c8:	4630      	mov	r0, r6
  4009ca:	47a8      	blx	r5
  4009cc:	2800      	cmp	r0, #0
  4009ce:	d1fa      	bne.n	4009c6 <usart_serial_putchar+0x36>
		return 1;
  4009d0:	2001      	movs	r0, #1
  4009d2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009d4:	461e      	mov	r6, r3
  4009d6:	4d21      	ldr	r5, [pc, #132]	; (400a5c <usart_serial_putchar+0xcc>)
  4009d8:	4621      	mov	r1, r4
  4009da:	4630      	mov	r0, r6
  4009dc:	47a8      	blx	r5
  4009de:	2800      	cmp	r0, #0
  4009e0:	d1fa      	bne.n	4009d8 <usart_serial_putchar+0x48>
		return 1;
  4009e2:	2001      	movs	r0, #1
  4009e4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009e6:	461e      	mov	r6, r3
  4009e8:	4d1c      	ldr	r5, [pc, #112]	; (400a5c <usart_serial_putchar+0xcc>)
  4009ea:	4621      	mov	r1, r4
  4009ec:	4630      	mov	r0, r6
  4009ee:	47a8      	blx	r5
  4009f0:	2800      	cmp	r0, #0
  4009f2:	d1fa      	bne.n	4009ea <usart_serial_putchar+0x5a>
		return 1;
  4009f4:	2001      	movs	r0, #1
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009f8:	461e      	mov	r6, r3
  4009fa:	4d18      	ldr	r5, [pc, #96]	; (400a5c <usart_serial_putchar+0xcc>)
  4009fc:	4621      	mov	r1, r4
  4009fe:	4630      	mov	r0, r6
  400a00:	47a8      	blx	r5
  400a02:	2800      	cmp	r0, #0
  400a04:	d1fa      	bne.n	4009fc <usart_serial_putchar+0x6c>
		return 1;
  400a06:	2001      	movs	r0, #1
  400a08:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400a0a:	461e      	mov	r6, r3
  400a0c:	4d14      	ldr	r5, [pc, #80]	; (400a60 <usart_serial_putchar+0xd0>)
  400a0e:	4621      	mov	r1, r4
  400a10:	4630      	mov	r0, r6
  400a12:	47a8      	blx	r5
  400a14:	2800      	cmp	r0, #0
  400a16:	d1fa      	bne.n	400a0e <usart_serial_putchar+0x7e>
		return 1;
  400a18:	2001      	movs	r0, #1
  400a1a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400a1c:	461e      	mov	r6, r3
  400a1e:	4d10      	ldr	r5, [pc, #64]	; (400a60 <usart_serial_putchar+0xd0>)
  400a20:	4621      	mov	r1, r4
  400a22:	4630      	mov	r0, r6
  400a24:	47a8      	blx	r5
  400a26:	2800      	cmp	r0, #0
  400a28:	d1fa      	bne.n	400a20 <usart_serial_putchar+0x90>
		return 1;
  400a2a:	2001      	movs	r0, #1
  400a2c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400a2e:	461e      	mov	r6, r3
  400a30:	4d0b      	ldr	r5, [pc, #44]	; (400a60 <usart_serial_putchar+0xd0>)
  400a32:	4621      	mov	r1, r4
  400a34:	4630      	mov	r0, r6
  400a36:	47a8      	blx	r5
  400a38:	2800      	cmp	r0, #0
  400a3a:	d1fa      	bne.n	400a32 <usart_serial_putchar+0xa2>
		return 1;
  400a3c:	2001      	movs	r0, #1
  400a3e:	bd70      	pop	{r4, r5, r6, pc}
  400a40:	400e0600 	.word	0x400e0600
  400a44:	400e0800 	.word	0x400e0800
  400a48:	40044000 	.word	0x40044000
  400a4c:	40048000 	.word	0x40048000
  400a50:	40024000 	.word	0x40024000
  400a54:	40028000 	.word	0x40028000
  400a58:	4002c000 	.word	0x4002c000
  400a5c:	004005ef 	.word	0x004005ef
  400a60:	004002dd 	.word	0x004002dd

00400a64 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
  400a64:	b580      	push	{r7, lr}
  400a66:	b08a      	sub	sp, #40	; 0x28
	const char str1[] = "Type 'a' to continue...\r\n";
	uint8_t rx_char = '0';
  400a68:	2330      	movs	r3, #48	; 0x30
  400a6a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	
	struct adc_config adc_conf;     // struct for configuring ADC
	uint32_t adc_val;               // holds ADC value read from ADC channel
	
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  400a6e:	4b2a      	ldr	r3, [pc, #168]	; (400b18 <main+0xb4>)
  400a70:	4798      	blx	r3
	board_init();
  400a72:	4b2a      	ldr	r3, [pc, #168]	; (400b1c <main+0xb8>)
  400a74:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400a76:	4d2a      	ldr	r5, [pc, #168]	; (400b20 <main+0xbc>)
  400a78:	4b2a      	ldr	r3, [pc, #168]	; (400b24 <main+0xc0>)
  400a7a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400a7c:	4a2a      	ldr	r2, [pc, #168]	; (400b28 <main+0xc4>)
  400a7e:	4b2b      	ldr	r3, [pc, #172]	; (400b2c <main+0xc8>)
  400a80:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400a82:	4a2b      	ldr	r2, [pc, #172]	; (400b30 <main+0xcc>)
  400a84:	4b2b      	ldr	r3, [pc, #172]	; (400b34 <main+0xd0>)
  400a86:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400a88:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 400b58 <main+0xf4>
  400a8c:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  400a90:	4c29      	ldr	r4, [pc, #164]	; (400b38 <main+0xd4>)
  400a92:	6823      	ldr	r3, [r4, #0]
  400a94:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400a96:	68a3      	ldr	r3, [r4, #8]
  400a98:	9302      	str	r3, [sp, #8]
  400a9a:	2009      	movs	r0, #9
  400a9c:	4f27      	ldr	r7, [pc, #156]	; (400b3c <main+0xd8>)
  400a9e:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400aa0:	4669      	mov	r1, sp
  400aa2:	4628      	mov	r0, r5
  400aa4:	4e26      	ldr	r6, [pc, #152]	; (400b40 <main+0xdc>)
  400aa6:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400aa8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 400b5c <main+0xf8>
  400aac:	f8da 3000 	ldr.w	r3, [sl]
  400ab0:	2100      	movs	r1, #0
  400ab2:	6898      	ldr	r0, [r3, #8]
  400ab4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 400b60 <main+0xfc>
  400ab8:	47c8      	blx	r9
	setbuf(stdin, NULL);
  400aba:	f8da 3000 	ldr.w	r3, [sl]
  400abe:	2100      	movs	r1, #0
  400ac0:	6858      	ldr	r0, [r3, #4]
  400ac2:	47c8      	blx	r9
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ac4:	f8cd 8000 	str.w	r8, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  400ac8:	6823      	ldr	r3, [r4, #0]
  400aca:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400acc:	68a3      	ldr	r3, [r4, #8]
  400ace:	9302      	str	r3, [sp, #8]
  400ad0:	2009      	movs	r0, #9
  400ad2:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400ad4:	4669      	mov	r1, sp
  400ad6:	4628      	mov	r0, r5
  400ad8:	47b0      	blx	r6
	
	// initialize the UART
	usart_serial_init(CONF_UART, &usart_options);
	
	// configure and enable the ADC
	adc_enable();                           // enable ADC
  400ada:	4b1a      	ldr	r3, [pc, #104]	; (400b44 <main+0xe0>)
  400adc:	4798      	blx	r3
	adc_get_config_defaults(&adc_conf);     // read ADC default values
  400ade:	a803      	add	r0, sp, #12
  400ae0:	4b19      	ldr	r3, [pc, #100]	; (400b48 <main+0xe4>)
  400ae2:	4798      	blx	r3
	adc_init(ADC, &adc_conf);               // initialize the ADC with default values
  400ae4:	4c19      	ldr	r4, [pc, #100]	; (400b4c <main+0xe8>)
  400ae6:	a903      	add	r1, sp, #12
  400ae8:	4620      	mov	r0, r4
  400aea:	4b19      	ldr	r3, [pc, #100]	; (400b50 <main+0xec>)
  400aec:	4798      	blx	r3
	reg = adc->ADC_MR;
  400aee:	6863      	ldr	r3, [r4, #4]
		reg &= ~(ADC_MR_TRGSEL_Msk | ADC_MR_TRGEN | ADC_MR_FREERUN_ON);
  400af0:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	adc->ADC_MR = reg;
  400af4:	6063      	str	r3, [r4, #4]
	adc->ADC_CHER = (adc_ch == ADC_CHANNEL_ALL) ?
  400af6:	2301      	movs	r3, #1
  400af8:	6123      	str	r3, [r4, #16]
	adc_channel_enable(ADC, ADC_CHANNEL_0); // enable ADC channel 0 (AD0, pin PA17 on ATSAM4N16C)
	
	
    do {
        // get a single character
        usart_serial_read_packet(CONF_UART, &rx_char, 3);
  400afa:	4c16      	ldr	r4, [pc, #88]	; (400b54 <main+0xf0>)
  400afc:	2203      	movs	r2, #3
  400afe:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  400b02:	4628      	mov	r0, r5
  400b04:	47a0      	blx	r4
    } while (rx_char != '0');
  400b06:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  400b0a:	2b30      	cmp	r3, #48	; 0x30
  400b0c:	d1f6      	bne.n	400afc <main+0x98>
    // send a single character
    usart_serial_putchar(CONF_UART, 'A');
  400b0e:	2141      	movs	r1, #65	; 0x41
  400b10:	4803      	ldr	r0, [pc, #12]	; (400b20 <main+0xbc>)
  400b12:	4b05      	ldr	r3, [pc, #20]	; (400b28 <main+0xc4>)
  400b14:	4798      	blx	r3
  400b16:	e7fe      	b.n	400b16 <main+0xb2>
  400b18:	00400449 	.word	0x00400449
  400b1c:	00400611 	.word	0x00400611
  400b20:	400e0800 	.word	0x400e0800
  400b24:	20000920 	.word	0x20000920
  400b28:	00400991 	.word	0x00400991
  400b2c:	2000091c 	.word	0x2000091c
  400b30:	004008b5 	.word	0x004008b5
  400b34:	20000918 	.word	0x20000918
  400b38:	20000008 	.word	0x20000008
  400b3c:	0040058d 	.word	0x0040058d
  400b40:	004005b9 	.word	0x004005b9
  400b44:	00400249 	.word	0x00400249
  400b48:	0040012d 	.word	0x0040012d
  400b4c:	40038000 	.word	0x40038000
  400b50:	00400181 	.word	0x00400181
  400b54:	00400359 	.word	0x00400359
  400b58:	05f5e100 	.word	0x05f5e100
  400b5c:	20000018 	.word	0x20000018
  400b60:	00400c51 	.word	0x00400c51

00400b64 <__libc_init_array>:
  400b64:	b570      	push	{r4, r5, r6, lr}
  400b66:	4e0f      	ldr	r6, [pc, #60]	; (400ba4 <__libc_init_array+0x40>)
  400b68:	4d0f      	ldr	r5, [pc, #60]	; (400ba8 <__libc_init_array+0x44>)
  400b6a:	1b76      	subs	r6, r6, r5
  400b6c:	10b6      	asrs	r6, r6, #2
  400b6e:	bf18      	it	ne
  400b70:	2400      	movne	r4, #0
  400b72:	d005      	beq.n	400b80 <__libc_init_array+0x1c>
  400b74:	3401      	adds	r4, #1
  400b76:	f855 3b04 	ldr.w	r3, [r5], #4
  400b7a:	4798      	blx	r3
  400b7c:	42a6      	cmp	r6, r4
  400b7e:	d1f9      	bne.n	400b74 <__libc_init_array+0x10>
  400b80:	4e0a      	ldr	r6, [pc, #40]	; (400bac <__libc_init_array+0x48>)
  400b82:	4d0b      	ldr	r5, [pc, #44]	; (400bb0 <__libc_init_array+0x4c>)
  400b84:	1b76      	subs	r6, r6, r5
  400b86:	f001 f89b 	bl	401cc0 <_init>
  400b8a:	10b6      	asrs	r6, r6, #2
  400b8c:	bf18      	it	ne
  400b8e:	2400      	movne	r4, #0
  400b90:	d006      	beq.n	400ba0 <__libc_init_array+0x3c>
  400b92:	3401      	adds	r4, #1
  400b94:	f855 3b04 	ldr.w	r3, [r5], #4
  400b98:	4798      	blx	r3
  400b9a:	42a6      	cmp	r6, r4
  400b9c:	d1f9      	bne.n	400b92 <__libc_init_array+0x2e>
  400b9e:	bd70      	pop	{r4, r5, r6, pc}
  400ba0:	bd70      	pop	{r4, r5, r6, pc}
  400ba2:	bf00      	nop
  400ba4:	00401ccc 	.word	0x00401ccc
  400ba8:	00401ccc 	.word	0x00401ccc
  400bac:	00401cd4 	.word	0x00401cd4
  400bb0:	00401ccc 	.word	0x00401ccc

00400bb4 <memset>:
  400bb4:	b470      	push	{r4, r5, r6}
  400bb6:	0786      	lsls	r6, r0, #30
  400bb8:	d046      	beq.n	400c48 <memset+0x94>
  400bba:	1e54      	subs	r4, r2, #1
  400bbc:	2a00      	cmp	r2, #0
  400bbe:	d041      	beq.n	400c44 <memset+0x90>
  400bc0:	b2ca      	uxtb	r2, r1
  400bc2:	4603      	mov	r3, r0
  400bc4:	e002      	b.n	400bcc <memset+0x18>
  400bc6:	f114 34ff 	adds.w	r4, r4, #4294967295
  400bca:	d33b      	bcc.n	400c44 <memset+0x90>
  400bcc:	f803 2b01 	strb.w	r2, [r3], #1
  400bd0:	079d      	lsls	r5, r3, #30
  400bd2:	d1f8      	bne.n	400bc6 <memset+0x12>
  400bd4:	2c03      	cmp	r4, #3
  400bd6:	d92e      	bls.n	400c36 <memset+0x82>
  400bd8:	b2cd      	uxtb	r5, r1
  400bda:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400bde:	2c0f      	cmp	r4, #15
  400be0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400be4:	d919      	bls.n	400c1a <memset+0x66>
  400be6:	f103 0210 	add.w	r2, r3, #16
  400bea:	4626      	mov	r6, r4
  400bec:	3e10      	subs	r6, #16
  400bee:	2e0f      	cmp	r6, #15
  400bf0:	f842 5c10 	str.w	r5, [r2, #-16]
  400bf4:	f842 5c0c 	str.w	r5, [r2, #-12]
  400bf8:	f842 5c08 	str.w	r5, [r2, #-8]
  400bfc:	f842 5c04 	str.w	r5, [r2, #-4]
  400c00:	f102 0210 	add.w	r2, r2, #16
  400c04:	d8f2      	bhi.n	400bec <memset+0x38>
  400c06:	f1a4 0210 	sub.w	r2, r4, #16
  400c0a:	f022 020f 	bic.w	r2, r2, #15
  400c0e:	f004 040f 	and.w	r4, r4, #15
  400c12:	3210      	adds	r2, #16
  400c14:	2c03      	cmp	r4, #3
  400c16:	4413      	add	r3, r2
  400c18:	d90d      	bls.n	400c36 <memset+0x82>
  400c1a:	461e      	mov	r6, r3
  400c1c:	4622      	mov	r2, r4
  400c1e:	3a04      	subs	r2, #4
  400c20:	2a03      	cmp	r2, #3
  400c22:	f846 5b04 	str.w	r5, [r6], #4
  400c26:	d8fa      	bhi.n	400c1e <memset+0x6a>
  400c28:	1f22      	subs	r2, r4, #4
  400c2a:	f022 0203 	bic.w	r2, r2, #3
  400c2e:	3204      	adds	r2, #4
  400c30:	4413      	add	r3, r2
  400c32:	f004 0403 	and.w	r4, r4, #3
  400c36:	b12c      	cbz	r4, 400c44 <memset+0x90>
  400c38:	b2c9      	uxtb	r1, r1
  400c3a:	441c      	add	r4, r3
  400c3c:	f803 1b01 	strb.w	r1, [r3], #1
  400c40:	429c      	cmp	r4, r3
  400c42:	d1fb      	bne.n	400c3c <memset+0x88>
  400c44:	bc70      	pop	{r4, r5, r6}
  400c46:	4770      	bx	lr
  400c48:	4614      	mov	r4, r2
  400c4a:	4603      	mov	r3, r0
  400c4c:	e7c2      	b.n	400bd4 <memset+0x20>
  400c4e:	bf00      	nop

00400c50 <setbuf>:
  400c50:	2900      	cmp	r1, #0
  400c52:	bf0c      	ite	eq
  400c54:	2202      	moveq	r2, #2
  400c56:	2200      	movne	r2, #0
  400c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400c5c:	f000 b800 	b.w	400c60 <setvbuf>

00400c60 <setvbuf>:
  400c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c64:	4c61      	ldr	r4, [pc, #388]	; (400dec <setvbuf+0x18c>)
  400c66:	6825      	ldr	r5, [r4, #0]
  400c68:	b083      	sub	sp, #12
  400c6a:	4604      	mov	r4, r0
  400c6c:	460f      	mov	r7, r1
  400c6e:	4690      	mov	r8, r2
  400c70:	461e      	mov	r6, r3
  400c72:	b115      	cbz	r5, 400c7a <setvbuf+0x1a>
  400c74:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400c76:	2b00      	cmp	r3, #0
  400c78:	d064      	beq.n	400d44 <setvbuf+0xe4>
  400c7a:	f1b8 0f02 	cmp.w	r8, #2
  400c7e:	d006      	beq.n	400c8e <setvbuf+0x2e>
  400c80:	f1b8 0f01 	cmp.w	r8, #1
  400c84:	f200 809f 	bhi.w	400dc6 <setvbuf+0x166>
  400c88:	2e00      	cmp	r6, #0
  400c8a:	f2c0 809c 	blt.w	400dc6 <setvbuf+0x166>
  400c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400c90:	07d8      	lsls	r0, r3, #31
  400c92:	d534      	bpl.n	400cfe <setvbuf+0x9e>
  400c94:	4621      	mov	r1, r4
  400c96:	4628      	mov	r0, r5
  400c98:	f000 f95a 	bl	400f50 <_fflush_r>
  400c9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400c9e:	b141      	cbz	r1, 400cb2 <setvbuf+0x52>
  400ca0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400ca4:	4299      	cmp	r1, r3
  400ca6:	d002      	beq.n	400cae <setvbuf+0x4e>
  400ca8:	4628      	mov	r0, r5
  400caa:	f000 fa4b 	bl	401144 <_free_r>
  400cae:	2300      	movs	r3, #0
  400cb0:	6323      	str	r3, [r4, #48]	; 0x30
  400cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400cb6:	2200      	movs	r2, #0
  400cb8:	61a2      	str	r2, [r4, #24]
  400cba:	6062      	str	r2, [r4, #4]
  400cbc:	061a      	lsls	r2, r3, #24
  400cbe:	d43a      	bmi.n	400d36 <setvbuf+0xd6>
  400cc0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400cc4:	f023 0303 	bic.w	r3, r3, #3
  400cc8:	f1b8 0f02 	cmp.w	r8, #2
  400ccc:	81a3      	strh	r3, [r4, #12]
  400cce:	d01d      	beq.n	400d0c <setvbuf+0xac>
  400cd0:	ab01      	add	r3, sp, #4
  400cd2:	466a      	mov	r2, sp
  400cd4:	4621      	mov	r1, r4
  400cd6:	4628      	mov	r0, r5
  400cd8:	f000 fb4c 	bl	401374 <__swhatbuf_r>
  400cdc:	89a3      	ldrh	r3, [r4, #12]
  400cde:	4318      	orrs	r0, r3
  400ce0:	81a0      	strh	r0, [r4, #12]
  400ce2:	2e00      	cmp	r6, #0
  400ce4:	d132      	bne.n	400d4c <setvbuf+0xec>
  400ce6:	9e00      	ldr	r6, [sp, #0]
  400ce8:	4630      	mov	r0, r6
  400cea:	f000 fb71 	bl	4013d0 <malloc>
  400cee:	4607      	mov	r7, r0
  400cf0:	2800      	cmp	r0, #0
  400cf2:	d06b      	beq.n	400dcc <setvbuf+0x16c>
  400cf4:	89a3      	ldrh	r3, [r4, #12]
  400cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400cfa:	81a3      	strh	r3, [r4, #12]
  400cfc:	e028      	b.n	400d50 <setvbuf+0xf0>
  400cfe:	89a3      	ldrh	r3, [r4, #12]
  400d00:	0599      	lsls	r1, r3, #22
  400d02:	d4c7      	bmi.n	400c94 <setvbuf+0x34>
  400d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400d06:	f000 fb31 	bl	40136c <__retarget_lock_acquire_recursive>
  400d0a:	e7c3      	b.n	400c94 <setvbuf+0x34>
  400d0c:	2500      	movs	r5, #0
  400d0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  400d10:	2600      	movs	r6, #0
  400d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400d16:	f043 0302 	orr.w	r3, r3, #2
  400d1a:	2001      	movs	r0, #1
  400d1c:	60a6      	str	r6, [r4, #8]
  400d1e:	07ce      	lsls	r6, r1, #31
  400d20:	81a3      	strh	r3, [r4, #12]
  400d22:	6022      	str	r2, [r4, #0]
  400d24:	6122      	str	r2, [r4, #16]
  400d26:	6160      	str	r0, [r4, #20]
  400d28:	d401      	bmi.n	400d2e <setvbuf+0xce>
  400d2a:	0598      	lsls	r0, r3, #22
  400d2c:	d53e      	bpl.n	400dac <setvbuf+0x14c>
  400d2e:	4628      	mov	r0, r5
  400d30:	b003      	add	sp, #12
  400d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d36:	6921      	ldr	r1, [r4, #16]
  400d38:	4628      	mov	r0, r5
  400d3a:	f000 fa03 	bl	401144 <_free_r>
  400d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400d42:	e7bd      	b.n	400cc0 <setvbuf+0x60>
  400d44:	4628      	mov	r0, r5
  400d46:	f000 f95b 	bl	401000 <__sinit>
  400d4a:	e796      	b.n	400c7a <setvbuf+0x1a>
  400d4c:	2f00      	cmp	r7, #0
  400d4e:	d0cb      	beq.n	400ce8 <setvbuf+0x88>
  400d50:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400d52:	2b00      	cmp	r3, #0
  400d54:	d033      	beq.n	400dbe <setvbuf+0x15e>
  400d56:	9b00      	ldr	r3, [sp, #0]
  400d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400d5c:	6027      	str	r7, [r4, #0]
  400d5e:	429e      	cmp	r6, r3
  400d60:	bf1c      	itt	ne
  400d62:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  400d66:	81a2      	strhne	r2, [r4, #12]
  400d68:	f1b8 0f01 	cmp.w	r8, #1
  400d6c:	bf04      	itt	eq
  400d6e:	f042 0201 	orreq.w	r2, r2, #1
  400d72:	81a2      	strheq	r2, [r4, #12]
  400d74:	b292      	uxth	r2, r2
  400d76:	f012 0308 	ands.w	r3, r2, #8
  400d7a:	6127      	str	r7, [r4, #16]
  400d7c:	6166      	str	r6, [r4, #20]
  400d7e:	d00e      	beq.n	400d9e <setvbuf+0x13e>
  400d80:	07d1      	lsls	r1, r2, #31
  400d82:	d51a      	bpl.n	400dba <setvbuf+0x15a>
  400d84:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400d86:	4276      	negs	r6, r6
  400d88:	2300      	movs	r3, #0
  400d8a:	f015 0501 	ands.w	r5, r5, #1
  400d8e:	61a6      	str	r6, [r4, #24]
  400d90:	60a3      	str	r3, [r4, #8]
  400d92:	d009      	beq.n	400da8 <setvbuf+0x148>
  400d94:	2500      	movs	r5, #0
  400d96:	4628      	mov	r0, r5
  400d98:	b003      	add	sp, #12
  400d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d9e:	60a3      	str	r3, [r4, #8]
  400da0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400da2:	f015 0501 	ands.w	r5, r5, #1
  400da6:	d1f5      	bne.n	400d94 <setvbuf+0x134>
  400da8:	0593      	lsls	r3, r2, #22
  400daa:	d4c0      	bmi.n	400d2e <setvbuf+0xce>
  400dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400dae:	f000 fadf 	bl	401370 <__retarget_lock_release_recursive>
  400db2:	4628      	mov	r0, r5
  400db4:	b003      	add	sp, #12
  400db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400dba:	60a6      	str	r6, [r4, #8]
  400dbc:	e7f0      	b.n	400da0 <setvbuf+0x140>
  400dbe:	4628      	mov	r0, r5
  400dc0:	f000 f91e 	bl	401000 <__sinit>
  400dc4:	e7c7      	b.n	400d56 <setvbuf+0xf6>
  400dc6:	f04f 35ff 	mov.w	r5, #4294967295
  400dca:	e7b0      	b.n	400d2e <setvbuf+0xce>
  400dcc:	f8dd 9000 	ldr.w	r9, [sp]
  400dd0:	45b1      	cmp	r9, r6
  400dd2:	d004      	beq.n	400dde <setvbuf+0x17e>
  400dd4:	4648      	mov	r0, r9
  400dd6:	f000 fafb 	bl	4013d0 <malloc>
  400dda:	4607      	mov	r7, r0
  400ddc:	b920      	cbnz	r0, 400de8 <setvbuf+0x188>
  400dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400de2:	f04f 35ff 	mov.w	r5, #4294967295
  400de6:	e792      	b.n	400d0e <setvbuf+0xae>
  400de8:	464e      	mov	r6, r9
  400dea:	e783      	b.n	400cf4 <setvbuf+0x94>
  400dec:	20000018 	.word	0x20000018

00400df0 <register_fini>:
  400df0:	4b02      	ldr	r3, [pc, #8]	; (400dfc <register_fini+0xc>)
  400df2:	b113      	cbz	r3, 400dfa <register_fini+0xa>
  400df4:	4802      	ldr	r0, [pc, #8]	; (400e00 <register_fini+0x10>)
  400df6:	f000 b805 	b.w	400e04 <atexit>
  400dfa:	4770      	bx	lr
  400dfc:	00000000 	.word	0x00000000
  400e00:	00401071 	.word	0x00401071

00400e04 <atexit>:
  400e04:	2300      	movs	r3, #0
  400e06:	4601      	mov	r1, r0
  400e08:	461a      	mov	r2, r3
  400e0a:	4618      	mov	r0, r3
  400e0c:	f000 be10 	b.w	401a30 <__register_exitproc>

00400e10 <__sflush_r>:
  400e10:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  400e14:	b29a      	uxth	r2, r3
  400e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e1a:	460d      	mov	r5, r1
  400e1c:	0711      	lsls	r1, r2, #28
  400e1e:	4680      	mov	r8, r0
  400e20:	d43a      	bmi.n	400e98 <__sflush_r+0x88>
  400e22:	686a      	ldr	r2, [r5, #4]
  400e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400e28:	2a00      	cmp	r2, #0
  400e2a:	81ab      	strh	r3, [r5, #12]
  400e2c:	dd6f      	ble.n	400f0e <__sflush_r+0xfe>
  400e2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400e30:	2c00      	cmp	r4, #0
  400e32:	d049      	beq.n	400ec8 <__sflush_r+0xb8>
  400e34:	2200      	movs	r2, #0
  400e36:	b29b      	uxth	r3, r3
  400e38:	f8d8 6000 	ldr.w	r6, [r8]
  400e3c:	f8c8 2000 	str.w	r2, [r8]
  400e40:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  400e44:	d067      	beq.n	400f16 <__sflush_r+0x106>
  400e46:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  400e48:	075f      	lsls	r7, r3, #29
  400e4a:	d505      	bpl.n	400e58 <__sflush_r+0x48>
  400e4c:	6869      	ldr	r1, [r5, #4]
  400e4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400e50:	1a52      	subs	r2, r2, r1
  400e52:	b10b      	cbz	r3, 400e58 <__sflush_r+0x48>
  400e54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400e56:	1ad2      	subs	r2, r2, r3
  400e58:	2300      	movs	r3, #0
  400e5a:	69e9      	ldr	r1, [r5, #28]
  400e5c:	4640      	mov	r0, r8
  400e5e:	47a0      	blx	r4
  400e60:	1c44      	adds	r4, r0, #1
  400e62:	d03c      	beq.n	400ede <__sflush_r+0xce>
  400e64:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  400e68:	692a      	ldr	r2, [r5, #16]
  400e6a:	602a      	str	r2, [r5, #0]
  400e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400e70:	2200      	movs	r2, #0
  400e72:	81ab      	strh	r3, [r5, #12]
  400e74:	04db      	lsls	r3, r3, #19
  400e76:	606a      	str	r2, [r5, #4]
  400e78:	d447      	bmi.n	400f0a <__sflush_r+0xfa>
  400e7a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  400e7c:	f8c8 6000 	str.w	r6, [r8]
  400e80:	b311      	cbz	r1, 400ec8 <__sflush_r+0xb8>
  400e82:	f105 0340 	add.w	r3, r5, #64	; 0x40
  400e86:	4299      	cmp	r1, r3
  400e88:	d002      	beq.n	400e90 <__sflush_r+0x80>
  400e8a:	4640      	mov	r0, r8
  400e8c:	f000 f95a 	bl	401144 <_free_r>
  400e90:	2000      	movs	r0, #0
  400e92:	6328      	str	r0, [r5, #48]	; 0x30
  400e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e98:	692e      	ldr	r6, [r5, #16]
  400e9a:	b1ae      	cbz	r6, 400ec8 <__sflush_r+0xb8>
  400e9c:	682c      	ldr	r4, [r5, #0]
  400e9e:	602e      	str	r6, [r5, #0]
  400ea0:	0791      	lsls	r1, r2, #30
  400ea2:	bf0c      	ite	eq
  400ea4:	696b      	ldreq	r3, [r5, #20]
  400ea6:	2300      	movne	r3, #0
  400ea8:	1ba4      	subs	r4, r4, r6
  400eaa:	60ab      	str	r3, [r5, #8]
  400eac:	e00a      	b.n	400ec4 <__sflush_r+0xb4>
  400eae:	4623      	mov	r3, r4
  400eb0:	4632      	mov	r2, r6
  400eb2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  400eb4:	69e9      	ldr	r1, [r5, #28]
  400eb6:	4640      	mov	r0, r8
  400eb8:	47b8      	blx	r7
  400eba:	2800      	cmp	r0, #0
  400ebc:	eba4 0400 	sub.w	r4, r4, r0
  400ec0:	4406      	add	r6, r0
  400ec2:	dd04      	ble.n	400ece <__sflush_r+0xbe>
  400ec4:	2c00      	cmp	r4, #0
  400ec6:	dcf2      	bgt.n	400eae <__sflush_r+0x9e>
  400ec8:	2000      	movs	r0, #0
  400eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ece:	89ab      	ldrh	r3, [r5, #12]
  400ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400ed4:	81ab      	strh	r3, [r5, #12]
  400ed6:	f04f 30ff 	mov.w	r0, #4294967295
  400eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ede:	f8d8 4000 	ldr.w	r4, [r8]
  400ee2:	2c1d      	cmp	r4, #29
  400ee4:	d8f3      	bhi.n	400ece <__sflush_r+0xbe>
  400ee6:	4b19      	ldr	r3, [pc, #100]	; (400f4c <__sflush_r+0x13c>)
  400ee8:	40e3      	lsrs	r3, r4
  400eea:	43db      	mvns	r3, r3
  400eec:	f013 0301 	ands.w	r3, r3, #1
  400ef0:	d1ed      	bne.n	400ece <__sflush_r+0xbe>
  400ef2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  400ef6:	606b      	str	r3, [r5, #4]
  400ef8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  400efc:	6929      	ldr	r1, [r5, #16]
  400efe:	81ab      	strh	r3, [r5, #12]
  400f00:	04da      	lsls	r2, r3, #19
  400f02:	6029      	str	r1, [r5, #0]
  400f04:	d5b9      	bpl.n	400e7a <__sflush_r+0x6a>
  400f06:	2c00      	cmp	r4, #0
  400f08:	d1b7      	bne.n	400e7a <__sflush_r+0x6a>
  400f0a:	6528      	str	r0, [r5, #80]	; 0x50
  400f0c:	e7b5      	b.n	400e7a <__sflush_r+0x6a>
  400f0e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  400f10:	2a00      	cmp	r2, #0
  400f12:	dc8c      	bgt.n	400e2e <__sflush_r+0x1e>
  400f14:	e7d8      	b.n	400ec8 <__sflush_r+0xb8>
  400f16:	2301      	movs	r3, #1
  400f18:	69e9      	ldr	r1, [r5, #28]
  400f1a:	4640      	mov	r0, r8
  400f1c:	47a0      	blx	r4
  400f1e:	1c43      	adds	r3, r0, #1
  400f20:	4602      	mov	r2, r0
  400f22:	d002      	beq.n	400f2a <__sflush_r+0x11a>
  400f24:	89ab      	ldrh	r3, [r5, #12]
  400f26:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400f28:	e78e      	b.n	400e48 <__sflush_r+0x38>
  400f2a:	f8d8 3000 	ldr.w	r3, [r8]
  400f2e:	2b00      	cmp	r3, #0
  400f30:	d0f8      	beq.n	400f24 <__sflush_r+0x114>
  400f32:	2b1d      	cmp	r3, #29
  400f34:	d001      	beq.n	400f3a <__sflush_r+0x12a>
  400f36:	2b16      	cmp	r3, #22
  400f38:	d102      	bne.n	400f40 <__sflush_r+0x130>
  400f3a:	f8c8 6000 	str.w	r6, [r8]
  400f3e:	e7c3      	b.n	400ec8 <__sflush_r+0xb8>
  400f40:	89ab      	ldrh	r3, [r5, #12]
  400f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400f46:	81ab      	strh	r3, [r5, #12]
  400f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f4c:	20400001 	.word	0x20400001

00400f50 <_fflush_r>:
  400f50:	b538      	push	{r3, r4, r5, lr}
  400f52:	460d      	mov	r5, r1
  400f54:	4604      	mov	r4, r0
  400f56:	b108      	cbz	r0, 400f5c <_fflush_r+0xc>
  400f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400f5a:	b1bb      	cbz	r3, 400f8c <_fflush_r+0x3c>
  400f5c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  400f60:	b188      	cbz	r0, 400f86 <_fflush_r+0x36>
  400f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  400f64:	07db      	lsls	r3, r3, #31
  400f66:	d401      	bmi.n	400f6c <_fflush_r+0x1c>
  400f68:	0581      	lsls	r1, r0, #22
  400f6a:	d517      	bpl.n	400f9c <_fflush_r+0x4c>
  400f6c:	4620      	mov	r0, r4
  400f6e:	4629      	mov	r1, r5
  400f70:	f7ff ff4e 	bl	400e10 <__sflush_r>
  400f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  400f76:	07da      	lsls	r2, r3, #31
  400f78:	4604      	mov	r4, r0
  400f7a:	d402      	bmi.n	400f82 <_fflush_r+0x32>
  400f7c:	89ab      	ldrh	r3, [r5, #12]
  400f7e:	059b      	lsls	r3, r3, #22
  400f80:	d507      	bpl.n	400f92 <_fflush_r+0x42>
  400f82:	4620      	mov	r0, r4
  400f84:	bd38      	pop	{r3, r4, r5, pc}
  400f86:	4604      	mov	r4, r0
  400f88:	4620      	mov	r0, r4
  400f8a:	bd38      	pop	{r3, r4, r5, pc}
  400f8c:	f000 f838 	bl	401000 <__sinit>
  400f90:	e7e4      	b.n	400f5c <_fflush_r+0xc>
  400f92:	6da8      	ldr	r0, [r5, #88]	; 0x58
  400f94:	f000 f9ec 	bl	401370 <__retarget_lock_release_recursive>
  400f98:	4620      	mov	r0, r4
  400f9a:	bd38      	pop	{r3, r4, r5, pc}
  400f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  400f9e:	f000 f9e5 	bl	40136c <__retarget_lock_acquire_recursive>
  400fa2:	e7e3      	b.n	400f6c <_fflush_r+0x1c>

00400fa4 <_cleanup_r>:
  400fa4:	4901      	ldr	r1, [pc, #4]	; (400fac <_cleanup_r+0x8>)
  400fa6:	f000 b9b3 	b.w	401310 <_fwalk_reent>
  400faa:	bf00      	nop
  400fac:	00401b19 	.word	0x00401b19

00400fb0 <std.isra.0>:
  400fb0:	b510      	push	{r4, lr}
  400fb2:	2300      	movs	r3, #0
  400fb4:	4604      	mov	r4, r0
  400fb6:	8181      	strh	r1, [r0, #12]
  400fb8:	81c2      	strh	r2, [r0, #14]
  400fba:	6003      	str	r3, [r0, #0]
  400fbc:	6043      	str	r3, [r0, #4]
  400fbe:	6083      	str	r3, [r0, #8]
  400fc0:	6643      	str	r3, [r0, #100]	; 0x64
  400fc2:	6103      	str	r3, [r0, #16]
  400fc4:	6143      	str	r3, [r0, #20]
  400fc6:	6183      	str	r3, [r0, #24]
  400fc8:	4619      	mov	r1, r3
  400fca:	2208      	movs	r2, #8
  400fcc:	305c      	adds	r0, #92	; 0x5c
  400fce:	f7ff fdf1 	bl	400bb4 <memset>
  400fd2:	4807      	ldr	r0, [pc, #28]	; (400ff0 <std.isra.0+0x40>)
  400fd4:	4907      	ldr	r1, [pc, #28]	; (400ff4 <std.isra.0+0x44>)
  400fd6:	4a08      	ldr	r2, [pc, #32]	; (400ff8 <std.isra.0+0x48>)
  400fd8:	4b08      	ldr	r3, [pc, #32]	; (400ffc <std.isra.0+0x4c>)
  400fda:	6220      	str	r0, [r4, #32]
  400fdc:	61e4      	str	r4, [r4, #28]
  400fde:	6261      	str	r1, [r4, #36]	; 0x24
  400fe0:	62a2      	str	r2, [r4, #40]	; 0x28
  400fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
  400fe4:	f104 0058 	add.w	r0, r4, #88	; 0x58
  400fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400fec:	f000 b9ba 	b.w	401364 <__retarget_lock_init_recursive>
  400ff0:	0040197d 	.word	0x0040197d
  400ff4:	004019a1 	.word	0x004019a1
  400ff8:	004019dd 	.word	0x004019dd
  400ffc:	004019fd 	.word	0x004019fd

00401000 <__sinit>:
  401000:	b510      	push	{r4, lr}
  401002:	4604      	mov	r4, r0
  401004:	4812      	ldr	r0, [pc, #72]	; (401050 <__sinit+0x50>)
  401006:	f000 f9b1 	bl	40136c <__retarget_lock_acquire_recursive>
  40100a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40100c:	b9d2      	cbnz	r2, 401044 <__sinit+0x44>
  40100e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  401012:	4810      	ldr	r0, [pc, #64]	; (401054 <__sinit+0x54>)
  401014:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401018:	2103      	movs	r1, #3
  40101a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40101e:	63e0      	str	r0, [r4, #60]	; 0x3c
  401020:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401024:	6860      	ldr	r0, [r4, #4]
  401026:	2104      	movs	r1, #4
  401028:	f7ff ffc2 	bl	400fb0 <std.isra.0>
  40102c:	2201      	movs	r2, #1
  40102e:	2109      	movs	r1, #9
  401030:	68a0      	ldr	r0, [r4, #8]
  401032:	f7ff ffbd 	bl	400fb0 <std.isra.0>
  401036:	2202      	movs	r2, #2
  401038:	2112      	movs	r1, #18
  40103a:	68e0      	ldr	r0, [r4, #12]
  40103c:	f7ff ffb8 	bl	400fb0 <std.isra.0>
  401040:	2301      	movs	r3, #1
  401042:	63a3      	str	r3, [r4, #56]	; 0x38
  401044:	4802      	ldr	r0, [pc, #8]	; (401050 <__sinit+0x50>)
  401046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40104a:	f000 b991 	b.w	401370 <__retarget_lock_release_recursive>
  40104e:	bf00      	nop
  401050:	20000930 	.word	0x20000930
  401054:	00400fa5 	.word	0x00400fa5

00401058 <__sfp_lock_acquire>:
  401058:	4801      	ldr	r0, [pc, #4]	; (401060 <__sfp_lock_acquire+0x8>)
  40105a:	f000 b987 	b.w	40136c <__retarget_lock_acquire_recursive>
  40105e:	bf00      	nop
  401060:	20000944 	.word	0x20000944

00401064 <__sfp_lock_release>:
  401064:	4801      	ldr	r0, [pc, #4]	; (40106c <__sfp_lock_release+0x8>)
  401066:	f000 b983 	b.w	401370 <__retarget_lock_release_recursive>
  40106a:	bf00      	nop
  40106c:	20000944 	.word	0x20000944

00401070 <__libc_fini_array>:
  401070:	b538      	push	{r3, r4, r5, lr}
  401072:	4c0a      	ldr	r4, [pc, #40]	; (40109c <__libc_fini_array+0x2c>)
  401074:	4d0a      	ldr	r5, [pc, #40]	; (4010a0 <__libc_fini_array+0x30>)
  401076:	1b64      	subs	r4, r4, r5
  401078:	10a4      	asrs	r4, r4, #2
  40107a:	d00a      	beq.n	401092 <__libc_fini_array+0x22>
  40107c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401080:	3b01      	subs	r3, #1
  401082:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401086:	3c01      	subs	r4, #1
  401088:	f855 3904 	ldr.w	r3, [r5], #-4
  40108c:	4798      	blx	r3
  40108e:	2c00      	cmp	r4, #0
  401090:	d1f9      	bne.n	401086 <__libc_fini_array+0x16>
  401092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401096:	f000 be1d 	b.w	401cd4 <_fini>
  40109a:	bf00      	nop
  40109c:	00401ce4 	.word	0x00401ce4
  4010a0:	00401ce0 	.word	0x00401ce0

004010a4 <_malloc_trim_r>:
  4010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010a6:	4f24      	ldr	r7, [pc, #144]	; (401138 <_malloc_trim_r+0x94>)
  4010a8:	460c      	mov	r4, r1
  4010aa:	4606      	mov	r6, r0
  4010ac:	f000 fc48 	bl	401940 <__malloc_lock>
  4010b0:	68bb      	ldr	r3, [r7, #8]
  4010b2:	685d      	ldr	r5, [r3, #4]
  4010b4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4010b8:	310f      	adds	r1, #15
  4010ba:	f025 0503 	bic.w	r5, r5, #3
  4010be:	4429      	add	r1, r5
  4010c0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4010c4:	f021 010f 	bic.w	r1, r1, #15
  4010c8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4010cc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4010d0:	db07      	blt.n	4010e2 <_malloc_trim_r+0x3e>
  4010d2:	2100      	movs	r1, #0
  4010d4:	4630      	mov	r0, r6
  4010d6:	f000 fc3f 	bl	401958 <_sbrk_r>
  4010da:	68bb      	ldr	r3, [r7, #8]
  4010dc:	442b      	add	r3, r5
  4010de:	4298      	cmp	r0, r3
  4010e0:	d004      	beq.n	4010ec <_malloc_trim_r+0x48>
  4010e2:	4630      	mov	r0, r6
  4010e4:	f000 fc32 	bl	40194c <__malloc_unlock>
  4010e8:	2000      	movs	r0, #0
  4010ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010ec:	4261      	negs	r1, r4
  4010ee:	4630      	mov	r0, r6
  4010f0:	f000 fc32 	bl	401958 <_sbrk_r>
  4010f4:	3001      	adds	r0, #1
  4010f6:	d00d      	beq.n	401114 <_malloc_trim_r+0x70>
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <_malloc_trim_r+0x98>)
  4010fa:	68ba      	ldr	r2, [r7, #8]
  4010fc:	6819      	ldr	r1, [r3, #0]
  4010fe:	1b2d      	subs	r5, r5, r4
  401100:	f045 0501 	orr.w	r5, r5, #1
  401104:	4630      	mov	r0, r6
  401106:	1b09      	subs	r1, r1, r4
  401108:	6055      	str	r5, [r2, #4]
  40110a:	6019      	str	r1, [r3, #0]
  40110c:	f000 fc1e 	bl	40194c <__malloc_unlock>
  401110:	2001      	movs	r0, #1
  401112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401114:	2100      	movs	r1, #0
  401116:	4630      	mov	r0, r6
  401118:	f000 fc1e 	bl	401958 <_sbrk_r>
  40111c:	68ba      	ldr	r2, [r7, #8]
  40111e:	1a83      	subs	r3, r0, r2
  401120:	2b0f      	cmp	r3, #15
  401122:	ddde      	ble.n	4010e2 <_malloc_trim_r+0x3e>
  401124:	4c06      	ldr	r4, [pc, #24]	; (401140 <_malloc_trim_r+0x9c>)
  401126:	4905      	ldr	r1, [pc, #20]	; (40113c <_malloc_trim_r+0x98>)
  401128:	6824      	ldr	r4, [r4, #0]
  40112a:	f043 0301 	orr.w	r3, r3, #1
  40112e:	1b00      	subs	r0, r0, r4
  401130:	6053      	str	r3, [r2, #4]
  401132:	6008      	str	r0, [r1, #0]
  401134:	e7d5      	b.n	4010e2 <_malloc_trim_r+0x3e>
  401136:	bf00      	nop
  401138:	2000044c 	.word	0x2000044c
  40113c:	2000087c 	.word	0x2000087c
  401140:	20000854 	.word	0x20000854

00401144 <_free_r>:
  401144:	2900      	cmp	r1, #0
  401146:	d044      	beq.n	4011d2 <_free_r+0x8e>
  401148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40114c:	460d      	mov	r5, r1
  40114e:	4680      	mov	r8, r0
  401150:	f000 fbf6 	bl	401940 <__malloc_lock>
  401154:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401158:	4969      	ldr	r1, [pc, #420]	; (401300 <_free_r+0x1bc>)
  40115a:	f027 0301 	bic.w	r3, r7, #1
  40115e:	f1a5 0408 	sub.w	r4, r5, #8
  401162:	18e2      	adds	r2, r4, r3
  401164:	688e      	ldr	r6, [r1, #8]
  401166:	6850      	ldr	r0, [r2, #4]
  401168:	42b2      	cmp	r2, r6
  40116a:	f020 0003 	bic.w	r0, r0, #3
  40116e:	d05e      	beq.n	40122e <_free_r+0xea>
  401170:	07fe      	lsls	r6, r7, #31
  401172:	6050      	str	r0, [r2, #4]
  401174:	d40b      	bmi.n	40118e <_free_r+0x4a>
  401176:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40117a:	1be4      	subs	r4, r4, r7
  40117c:	f101 0e08 	add.w	lr, r1, #8
  401180:	68a5      	ldr	r5, [r4, #8]
  401182:	4575      	cmp	r5, lr
  401184:	443b      	add	r3, r7
  401186:	d06d      	beq.n	401264 <_free_r+0x120>
  401188:	68e7      	ldr	r7, [r4, #12]
  40118a:	60ef      	str	r7, [r5, #12]
  40118c:	60bd      	str	r5, [r7, #8]
  40118e:	1815      	adds	r5, r2, r0
  401190:	686d      	ldr	r5, [r5, #4]
  401192:	07ed      	lsls	r5, r5, #31
  401194:	d53e      	bpl.n	401214 <_free_r+0xd0>
  401196:	f043 0201 	orr.w	r2, r3, #1
  40119a:	6062      	str	r2, [r4, #4]
  40119c:	50e3      	str	r3, [r4, r3]
  40119e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4011a2:	d217      	bcs.n	4011d4 <_free_r+0x90>
  4011a4:	08db      	lsrs	r3, r3, #3
  4011a6:	1c58      	adds	r0, r3, #1
  4011a8:	109a      	asrs	r2, r3, #2
  4011aa:	684d      	ldr	r5, [r1, #4]
  4011ac:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4011b0:	60a7      	str	r7, [r4, #8]
  4011b2:	2301      	movs	r3, #1
  4011b4:	4093      	lsls	r3, r2
  4011b6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4011ba:	432b      	orrs	r3, r5
  4011bc:	3a08      	subs	r2, #8
  4011be:	60e2      	str	r2, [r4, #12]
  4011c0:	604b      	str	r3, [r1, #4]
  4011c2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4011c6:	60fc      	str	r4, [r7, #12]
  4011c8:	4640      	mov	r0, r8
  4011ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4011ce:	f000 bbbd 	b.w	40194c <__malloc_unlock>
  4011d2:	4770      	bx	lr
  4011d4:	0a5a      	lsrs	r2, r3, #9
  4011d6:	2a04      	cmp	r2, #4
  4011d8:	d852      	bhi.n	401280 <_free_r+0x13c>
  4011da:	099a      	lsrs	r2, r3, #6
  4011dc:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4011e0:	00ff      	lsls	r7, r7, #3
  4011e2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4011e6:	19c8      	adds	r0, r1, r7
  4011e8:	59ca      	ldr	r2, [r1, r7]
  4011ea:	3808      	subs	r0, #8
  4011ec:	4290      	cmp	r0, r2
  4011ee:	d04f      	beq.n	401290 <_free_r+0x14c>
  4011f0:	6851      	ldr	r1, [r2, #4]
  4011f2:	f021 0103 	bic.w	r1, r1, #3
  4011f6:	428b      	cmp	r3, r1
  4011f8:	d232      	bcs.n	401260 <_free_r+0x11c>
  4011fa:	6892      	ldr	r2, [r2, #8]
  4011fc:	4290      	cmp	r0, r2
  4011fe:	d1f7      	bne.n	4011f0 <_free_r+0xac>
  401200:	68c3      	ldr	r3, [r0, #12]
  401202:	60a0      	str	r0, [r4, #8]
  401204:	60e3      	str	r3, [r4, #12]
  401206:	609c      	str	r4, [r3, #8]
  401208:	60c4      	str	r4, [r0, #12]
  40120a:	4640      	mov	r0, r8
  40120c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401210:	f000 bb9c 	b.w	40194c <__malloc_unlock>
  401214:	6895      	ldr	r5, [r2, #8]
  401216:	4f3b      	ldr	r7, [pc, #236]	; (401304 <_free_r+0x1c0>)
  401218:	42bd      	cmp	r5, r7
  40121a:	4403      	add	r3, r0
  40121c:	d040      	beq.n	4012a0 <_free_r+0x15c>
  40121e:	68d0      	ldr	r0, [r2, #12]
  401220:	60e8      	str	r0, [r5, #12]
  401222:	f043 0201 	orr.w	r2, r3, #1
  401226:	6085      	str	r5, [r0, #8]
  401228:	6062      	str	r2, [r4, #4]
  40122a:	50e3      	str	r3, [r4, r3]
  40122c:	e7b7      	b.n	40119e <_free_r+0x5a>
  40122e:	07ff      	lsls	r7, r7, #31
  401230:	4403      	add	r3, r0
  401232:	d407      	bmi.n	401244 <_free_r+0x100>
  401234:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401238:	1aa4      	subs	r4, r4, r2
  40123a:	4413      	add	r3, r2
  40123c:	68a0      	ldr	r0, [r4, #8]
  40123e:	68e2      	ldr	r2, [r4, #12]
  401240:	60c2      	str	r2, [r0, #12]
  401242:	6090      	str	r0, [r2, #8]
  401244:	4a30      	ldr	r2, [pc, #192]	; (401308 <_free_r+0x1c4>)
  401246:	6812      	ldr	r2, [r2, #0]
  401248:	f043 0001 	orr.w	r0, r3, #1
  40124c:	4293      	cmp	r3, r2
  40124e:	6060      	str	r0, [r4, #4]
  401250:	608c      	str	r4, [r1, #8]
  401252:	d3b9      	bcc.n	4011c8 <_free_r+0x84>
  401254:	4b2d      	ldr	r3, [pc, #180]	; (40130c <_free_r+0x1c8>)
  401256:	4640      	mov	r0, r8
  401258:	6819      	ldr	r1, [r3, #0]
  40125a:	f7ff ff23 	bl	4010a4 <_malloc_trim_r>
  40125e:	e7b3      	b.n	4011c8 <_free_r+0x84>
  401260:	4610      	mov	r0, r2
  401262:	e7cd      	b.n	401200 <_free_r+0xbc>
  401264:	1811      	adds	r1, r2, r0
  401266:	6849      	ldr	r1, [r1, #4]
  401268:	07c9      	lsls	r1, r1, #31
  40126a:	d444      	bmi.n	4012f6 <_free_r+0x1b2>
  40126c:	6891      	ldr	r1, [r2, #8]
  40126e:	68d2      	ldr	r2, [r2, #12]
  401270:	60ca      	str	r2, [r1, #12]
  401272:	4403      	add	r3, r0
  401274:	f043 0001 	orr.w	r0, r3, #1
  401278:	6091      	str	r1, [r2, #8]
  40127a:	6060      	str	r0, [r4, #4]
  40127c:	50e3      	str	r3, [r4, r3]
  40127e:	e7a3      	b.n	4011c8 <_free_r+0x84>
  401280:	2a14      	cmp	r2, #20
  401282:	d816      	bhi.n	4012b2 <_free_r+0x16e>
  401284:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401288:	00ff      	lsls	r7, r7, #3
  40128a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40128e:	e7aa      	b.n	4011e6 <_free_r+0xa2>
  401290:	10aa      	asrs	r2, r5, #2
  401292:	2301      	movs	r3, #1
  401294:	684d      	ldr	r5, [r1, #4]
  401296:	4093      	lsls	r3, r2
  401298:	432b      	orrs	r3, r5
  40129a:	604b      	str	r3, [r1, #4]
  40129c:	4603      	mov	r3, r0
  40129e:	e7b0      	b.n	401202 <_free_r+0xbe>
  4012a0:	f043 0201 	orr.w	r2, r3, #1
  4012a4:	614c      	str	r4, [r1, #20]
  4012a6:	610c      	str	r4, [r1, #16]
  4012a8:	60e5      	str	r5, [r4, #12]
  4012aa:	60a5      	str	r5, [r4, #8]
  4012ac:	6062      	str	r2, [r4, #4]
  4012ae:	50e3      	str	r3, [r4, r3]
  4012b0:	e78a      	b.n	4011c8 <_free_r+0x84>
  4012b2:	2a54      	cmp	r2, #84	; 0x54
  4012b4:	d806      	bhi.n	4012c4 <_free_r+0x180>
  4012b6:	0b1a      	lsrs	r2, r3, #12
  4012b8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4012bc:	00ff      	lsls	r7, r7, #3
  4012be:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4012c2:	e790      	b.n	4011e6 <_free_r+0xa2>
  4012c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4012c8:	d806      	bhi.n	4012d8 <_free_r+0x194>
  4012ca:	0bda      	lsrs	r2, r3, #15
  4012cc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4012d0:	00ff      	lsls	r7, r7, #3
  4012d2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4012d6:	e786      	b.n	4011e6 <_free_r+0xa2>
  4012d8:	f240 5054 	movw	r0, #1364	; 0x554
  4012dc:	4282      	cmp	r2, r0
  4012de:	d806      	bhi.n	4012ee <_free_r+0x1aa>
  4012e0:	0c9a      	lsrs	r2, r3, #18
  4012e2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4012e6:	00ff      	lsls	r7, r7, #3
  4012e8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4012ec:	e77b      	b.n	4011e6 <_free_r+0xa2>
  4012ee:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4012f2:	257e      	movs	r5, #126	; 0x7e
  4012f4:	e777      	b.n	4011e6 <_free_r+0xa2>
  4012f6:	f043 0101 	orr.w	r1, r3, #1
  4012fa:	6061      	str	r1, [r4, #4]
  4012fc:	6013      	str	r3, [r2, #0]
  4012fe:	e763      	b.n	4011c8 <_free_r+0x84>
  401300:	2000044c 	.word	0x2000044c
  401304:	20000454 	.word	0x20000454
  401308:	20000858 	.word	0x20000858
  40130c:	200008ac 	.word	0x200008ac

00401310 <_fwalk_reent>:
  401310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401314:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401318:	d01f      	beq.n	40135a <_fwalk_reent+0x4a>
  40131a:	4688      	mov	r8, r1
  40131c:	4606      	mov	r6, r0
  40131e:	f04f 0900 	mov.w	r9, #0
  401322:	687d      	ldr	r5, [r7, #4]
  401324:	68bc      	ldr	r4, [r7, #8]
  401326:	3d01      	subs	r5, #1
  401328:	d411      	bmi.n	40134e <_fwalk_reent+0x3e>
  40132a:	89a3      	ldrh	r3, [r4, #12]
  40132c:	2b01      	cmp	r3, #1
  40132e:	f105 35ff 	add.w	r5, r5, #4294967295
  401332:	d908      	bls.n	401346 <_fwalk_reent+0x36>
  401334:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401338:	3301      	adds	r3, #1
  40133a:	4621      	mov	r1, r4
  40133c:	4630      	mov	r0, r6
  40133e:	d002      	beq.n	401346 <_fwalk_reent+0x36>
  401340:	47c0      	blx	r8
  401342:	ea49 0900 	orr.w	r9, r9, r0
  401346:	1c6b      	adds	r3, r5, #1
  401348:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40134c:	d1ed      	bne.n	40132a <_fwalk_reent+0x1a>
  40134e:	683f      	ldr	r7, [r7, #0]
  401350:	2f00      	cmp	r7, #0
  401352:	d1e6      	bne.n	401322 <_fwalk_reent+0x12>
  401354:	4648      	mov	r0, r9
  401356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40135a:	46b9      	mov	r9, r7
  40135c:	4648      	mov	r0, r9
  40135e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401362:	bf00      	nop

00401364 <__retarget_lock_init_recursive>:
  401364:	4770      	bx	lr
  401366:	bf00      	nop

00401368 <__retarget_lock_close_recursive>:
  401368:	4770      	bx	lr
  40136a:	bf00      	nop

0040136c <__retarget_lock_acquire_recursive>:
  40136c:	4770      	bx	lr
  40136e:	bf00      	nop

00401370 <__retarget_lock_release_recursive>:
  401370:	4770      	bx	lr
  401372:	bf00      	nop

00401374 <__swhatbuf_r>:
  401374:	b570      	push	{r4, r5, r6, lr}
  401376:	460c      	mov	r4, r1
  401378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40137c:	2900      	cmp	r1, #0
  40137e:	b090      	sub	sp, #64	; 0x40
  401380:	4615      	mov	r5, r2
  401382:	461e      	mov	r6, r3
  401384:	db14      	blt.n	4013b0 <__swhatbuf_r+0x3c>
  401386:	aa01      	add	r2, sp, #4
  401388:	f000 fc28 	bl	401bdc <_fstat_r>
  40138c:	2800      	cmp	r0, #0
  40138e:	db0f      	blt.n	4013b0 <__swhatbuf_r+0x3c>
  401390:	9a02      	ldr	r2, [sp, #8]
  401392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401396:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40139a:	fab2 f282 	clz	r2, r2
  40139e:	0952      	lsrs	r2, r2, #5
  4013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4013a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4013a8:	6032      	str	r2, [r6, #0]
  4013aa:	602b      	str	r3, [r5, #0]
  4013ac:	b010      	add	sp, #64	; 0x40
  4013ae:	bd70      	pop	{r4, r5, r6, pc}
  4013b0:	89a2      	ldrh	r2, [r4, #12]
  4013b2:	2300      	movs	r3, #0
  4013b4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4013b8:	6033      	str	r3, [r6, #0]
  4013ba:	d004      	beq.n	4013c6 <__swhatbuf_r+0x52>
  4013bc:	2240      	movs	r2, #64	; 0x40
  4013be:	4618      	mov	r0, r3
  4013c0:	602a      	str	r2, [r5, #0]
  4013c2:	b010      	add	sp, #64	; 0x40
  4013c4:	bd70      	pop	{r4, r5, r6, pc}
  4013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4013ca:	602b      	str	r3, [r5, #0]
  4013cc:	b010      	add	sp, #64	; 0x40
  4013ce:	bd70      	pop	{r4, r5, r6, pc}

004013d0 <malloc>:
  4013d0:	4b02      	ldr	r3, [pc, #8]	; (4013dc <malloc+0xc>)
  4013d2:	4601      	mov	r1, r0
  4013d4:	6818      	ldr	r0, [r3, #0]
  4013d6:	f000 b803 	b.w	4013e0 <_malloc_r>
  4013da:	bf00      	nop
  4013dc:	20000018 	.word	0x20000018

004013e0 <_malloc_r>:
  4013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e4:	f101 060b 	add.w	r6, r1, #11
  4013e8:	2e16      	cmp	r6, #22
  4013ea:	b083      	sub	sp, #12
  4013ec:	4605      	mov	r5, r0
  4013ee:	f240 809e 	bls.w	40152e <_malloc_r+0x14e>
  4013f2:	f036 0607 	bics.w	r6, r6, #7
  4013f6:	f100 80bd 	bmi.w	401574 <_malloc_r+0x194>
  4013fa:	42b1      	cmp	r1, r6
  4013fc:	f200 80ba 	bhi.w	401574 <_malloc_r+0x194>
  401400:	f000 fa9e 	bl	401940 <__malloc_lock>
  401404:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401408:	f0c0 8293 	bcc.w	401932 <_malloc_r+0x552>
  40140c:	0a73      	lsrs	r3, r6, #9
  40140e:	f000 80b8 	beq.w	401582 <_malloc_r+0x1a2>
  401412:	2b04      	cmp	r3, #4
  401414:	f200 8179 	bhi.w	40170a <_malloc_r+0x32a>
  401418:	09b3      	lsrs	r3, r6, #6
  40141a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40141e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401422:	00c3      	lsls	r3, r0, #3
  401424:	4fbf      	ldr	r7, [pc, #764]	; (401724 <_malloc_r+0x344>)
  401426:	443b      	add	r3, r7
  401428:	f1a3 0108 	sub.w	r1, r3, #8
  40142c:	685c      	ldr	r4, [r3, #4]
  40142e:	42a1      	cmp	r1, r4
  401430:	d106      	bne.n	401440 <_malloc_r+0x60>
  401432:	e00c      	b.n	40144e <_malloc_r+0x6e>
  401434:	2a00      	cmp	r2, #0
  401436:	f280 80aa 	bge.w	40158e <_malloc_r+0x1ae>
  40143a:	68e4      	ldr	r4, [r4, #12]
  40143c:	42a1      	cmp	r1, r4
  40143e:	d006      	beq.n	40144e <_malloc_r+0x6e>
  401440:	6863      	ldr	r3, [r4, #4]
  401442:	f023 0303 	bic.w	r3, r3, #3
  401446:	1b9a      	subs	r2, r3, r6
  401448:	2a0f      	cmp	r2, #15
  40144a:	ddf3      	ble.n	401434 <_malloc_r+0x54>
  40144c:	4670      	mov	r0, lr
  40144e:	693c      	ldr	r4, [r7, #16]
  401450:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401738 <_malloc_r+0x358>
  401454:	4574      	cmp	r4, lr
  401456:	f000 81ab 	beq.w	4017b0 <_malloc_r+0x3d0>
  40145a:	6863      	ldr	r3, [r4, #4]
  40145c:	f023 0303 	bic.w	r3, r3, #3
  401460:	1b9a      	subs	r2, r3, r6
  401462:	2a0f      	cmp	r2, #15
  401464:	f300 8190 	bgt.w	401788 <_malloc_r+0x3a8>
  401468:	2a00      	cmp	r2, #0
  40146a:	f8c7 e014 	str.w	lr, [r7, #20]
  40146e:	f8c7 e010 	str.w	lr, [r7, #16]
  401472:	f280 809d 	bge.w	4015b0 <_malloc_r+0x1d0>
  401476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40147a:	f080 8161 	bcs.w	401740 <_malloc_r+0x360>
  40147e:	08db      	lsrs	r3, r3, #3
  401480:	f103 0c01 	add.w	ip, r3, #1
  401484:	1099      	asrs	r1, r3, #2
  401486:	687a      	ldr	r2, [r7, #4]
  401488:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40148c:	f8c4 8008 	str.w	r8, [r4, #8]
  401490:	2301      	movs	r3, #1
  401492:	408b      	lsls	r3, r1
  401494:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401498:	4313      	orrs	r3, r2
  40149a:	3908      	subs	r1, #8
  40149c:	60e1      	str	r1, [r4, #12]
  40149e:	607b      	str	r3, [r7, #4]
  4014a0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4014a4:	f8c8 400c 	str.w	r4, [r8, #12]
  4014a8:	1082      	asrs	r2, r0, #2
  4014aa:	2401      	movs	r4, #1
  4014ac:	4094      	lsls	r4, r2
  4014ae:	429c      	cmp	r4, r3
  4014b0:	f200 808b 	bhi.w	4015ca <_malloc_r+0x1ea>
  4014b4:	421c      	tst	r4, r3
  4014b6:	d106      	bne.n	4014c6 <_malloc_r+0xe6>
  4014b8:	f020 0003 	bic.w	r0, r0, #3
  4014bc:	0064      	lsls	r4, r4, #1
  4014be:	421c      	tst	r4, r3
  4014c0:	f100 0004 	add.w	r0, r0, #4
  4014c4:	d0fa      	beq.n	4014bc <_malloc_r+0xdc>
  4014c6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4014ca:	46cc      	mov	ip, r9
  4014cc:	4680      	mov	r8, r0
  4014ce:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4014d2:	459c      	cmp	ip, r3
  4014d4:	d107      	bne.n	4014e6 <_malloc_r+0x106>
  4014d6:	e16d      	b.n	4017b4 <_malloc_r+0x3d4>
  4014d8:	2a00      	cmp	r2, #0
  4014da:	f280 817b 	bge.w	4017d4 <_malloc_r+0x3f4>
  4014de:	68db      	ldr	r3, [r3, #12]
  4014e0:	459c      	cmp	ip, r3
  4014e2:	f000 8167 	beq.w	4017b4 <_malloc_r+0x3d4>
  4014e6:	6859      	ldr	r1, [r3, #4]
  4014e8:	f021 0103 	bic.w	r1, r1, #3
  4014ec:	1b8a      	subs	r2, r1, r6
  4014ee:	2a0f      	cmp	r2, #15
  4014f0:	ddf2      	ble.n	4014d8 <_malloc_r+0xf8>
  4014f2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4014f6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4014fa:	9300      	str	r3, [sp, #0]
  4014fc:	199c      	adds	r4, r3, r6
  4014fe:	4628      	mov	r0, r5
  401500:	f046 0601 	orr.w	r6, r6, #1
  401504:	f042 0501 	orr.w	r5, r2, #1
  401508:	605e      	str	r6, [r3, #4]
  40150a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40150e:	f8cc 8008 	str.w	r8, [ip, #8]
  401512:	617c      	str	r4, [r7, #20]
  401514:	613c      	str	r4, [r7, #16]
  401516:	f8c4 e00c 	str.w	lr, [r4, #12]
  40151a:	f8c4 e008 	str.w	lr, [r4, #8]
  40151e:	6065      	str	r5, [r4, #4]
  401520:	505a      	str	r2, [r3, r1]
  401522:	f000 fa13 	bl	40194c <__malloc_unlock>
  401526:	9b00      	ldr	r3, [sp, #0]
  401528:	f103 0408 	add.w	r4, r3, #8
  40152c:	e01e      	b.n	40156c <_malloc_r+0x18c>
  40152e:	2910      	cmp	r1, #16
  401530:	d820      	bhi.n	401574 <_malloc_r+0x194>
  401532:	f000 fa05 	bl	401940 <__malloc_lock>
  401536:	2610      	movs	r6, #16
  401538:	2318      	movs	r3, #24
  40153a:	2002      	movs	r0, #2
  40153c:	4f79      	ldr	r7, [pc, #484]	; (401724 <_malloc_r+0x344>)
  40153e:	443b      	add	r3, r7
  401540:	f1a3 0208 	sub.w	r2, r3, #8
  401544:	685c      	ldr	r4, [r3, #4]
  401546:	4294      	cmp	r4, r2
  401548:	f000 813d 	beq.w	4017c6 <_malloc_r+0x3e6>
  40154c:	6863      	ldr	r3, [r4, #4]
  40154e:	68e1      	ldr	r1, [r4, #12]
  401550:	68a6      	ldr	r6, [r4, #8]
  401552:	f023 0303 	bic.w	r3, r3, #3
  401556:	4423      	add	r3, r4
  401558:	4628      	mov	r0, r5
  40155a:	685a      	ldr	r2, [r3, #4]
  40155c:	60f1      	str	r1, [r6, #12]
  40155e:	f042 0201 	orr.w	r2, r2, #1
  401562:	608e      	str	r6, [r1, #8]
  401564:	605a      	str	r2, [r3, #4]
  401566:	f000 f9f1 	bl	40194c <__malloc_unlock>
  40156a:	3408      	adds	r4, #8
  40156c:	4620      	mov	r0, r4
  40156e:	b003      	add	sp, #12
  401570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401574:	2400      	movs	r4, #0
  401576:	230c      	movs	r3, #12
  401578:	4620      	mov	r0, r4
  40157a:	602b      	str	r3, [r5, #0]
  40157c:	b003      	add	sp, #12
  40157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401582:	2040      	movs	r0, #64	; 0x40
  401584:	f44f 7300 	mov.w	r3, #512	; 0x200
  401588:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40158c:	e74a      	b.n	401424 <_malloc_r+0x44>
  40158e:	4423      	add	r3, r4
  401590:	68e1      	ldr	r1, [r4, #12]
  401592:	685a      	ldr	r2, [r3, #4]
  401594:	68a6      	ldr	r6, [r4, #8]
  401596:	f042 0201 	orr.w	r2, r2, #1
  40159a:	60f1      	str	r1, [r6, #12]
  40159c:	4628      	mov	r0, r5
  40159e:	608e      	str	r6, [r1, #8]
  4015a0:	605a      	str	r2, [r3, #4]
  4015a2:	f000 f9d3 	bl	40194c <__malloc_unlock>
  4015a6:	3408      	adds	r4, #8
  4015a8:	4620      	mov	r0, r4
  4015aa:	b003      	add	sp, #12
  4015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015b0:	4423      	add	r3, r4
  4015b2:	4628      	mov	r0, r5
  4015b4:	685a      	ldr	r2, [r3, #4]
  4015b6:	f042 0201 	orr.w	r2, r2, #1
  4015ba:	605a      	str	r2, [r3, #4]
  4015bc:	f000 f9c6 	bl	40194c <__malloc_unlock>
  4015c0:	3408      	adds	r4, #8
  4015c2:	4620      	mov	r0, r4
  4015c4:	b003      	add	sp, #12
  4015c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ca:	68bc      	ldr	r4, [r7, #8]
  4015cc:	6863      	ldr	r3, [r4, #4]
  4015ce:	f023 0803 	bic.w	r8, r3, #3
  4015d2:	45b0      	cmp	r8, r6
  4015d4:	d304      	bcc.n	4015e0 <_malloc_r+0x200>
  4015d6:	eba8 0306 	sub.w	r3, r8, r6
  4015da:	2b0f      	cmp	r3, #15
  4015dc:	f300 8085 	bgt.w	4016ea <_malloc_r+0x30a>
  4015e0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40173c <_malloc_r+0x35c>
  4015e4:	4b50      	ldr	r3, [pc, #320]	; (401728 <_malloc_r+0x348>)
  4015e6:	f8d9 2000 	ldr.w	r2, [r9]
  4015ea:	681b      	ldr	r3, [r3, #0]
  4015ec:	3201      	adds	r2, #1
  4015ee:	4433      	add	r3, r6
  4015f0:	eb04 0a08 	add.w	sl, r4, r8
  4015f4:	f000 8155 	beq.w	4018a2 <_malloc_r+0x4c2>
  4015f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4015fc:	330f      	adds	r3, #15
  4015fe:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401602:	f02b 0b0f 	bic.w	fp, fp, #15
  401606:	4659      	mov	r1, fp
  401608:	4628      	mov	r0, r5
  40160a:	f000 f9a5 	bl	401958 <_sbrk_r>
  40160e:	1c41      	adds	r1, r0, #1
  401610:	4602      	mov	r2, r0
  401612:	f000 80fc 	beq.w	40180e <_malloc_r+0x42e>
  401616:	4582      	cmp	sl, r0
  401618:	f200 80f7 	bhi.w	40180a <_malloc_r+0x42a>
  40161c:	4b43      	ldr	r3, [pc, #268]	; (40172c <_malloc_r+0x34c>)
  40161e:	6819      	ldr	r1, [r3, #0]
  401620:	4459      	add	r1, fp
  401622:	6019      	str	r1, [r3, #0]
  401624:	f000 814d 	beq.w	4018c2 <_malloc_r+0x4e2>
  401628:	f8d9 0000 	ldr.w	r0, [r9]
  40162c:	3001      	adds	r0, #1
  40162e:	bf1b      	ittet	ne
  401630:	eba2 0a0a 	subne.w	sl, r2, sl
  401634:	4451      	addne	r1, sl
  401636:	f8c9 2000 	streq.w	r2, [r9]
  40163a:	6019      	strne	r1, [r3, #0]
  40163c:	f012 0107 	ands.w	r1, r2, #7
  401640:	f000 8115 	beq.w	40186e <_malloc_r+0x48e>
  401644:	f1c1 0008 	rsb	r0, r1, #8
  401648:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40164c:	4402      	add	r2, r0
  40164e:	3108      	adds	r1, #8
  401650:	eb02 090b 	add.w	r9, r2, fp
  401654:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401658:	eba1 0909 	sub.w	r9, r1, r9
  40165c:	4649      	mov	r1, r9
  40165e:	4628      	mov	r0, r5
  401660:	9301      	str	r3, [sp, #4]
  401662:	9200      	str	r2, [sp, #0]
  401664:	f000 f978 	bl	401958 <_sbrk_r>
  401668:	1c43      	adds	r3, r0, #1
  40166a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40166e:	f000 8143 	beq.w	4018f8 <_malloc_r+0x518>
  401672:	1a80      	subs	r0, r0, r2
  401674:	4448      	add	r0, r9
  401676:	f040 0001 	orr.w	r0, r0, #1
  40167a:	6819      	ldr	r1, [r3, #0]
  40167c:	60ba      	str	r2, [r7, #8]
  40167e:	4449      	add	r1, r9
  401680:	42bc      	cmp	r4, r7
  401682:	6050      	str	r0, [r2, #4]
  401684:	6019      	str	r1, [r3, #0]
  401686:	d017      	beq.n	4016b8 <_malloc_r+0x2d8>
  401688:	f1b8 0f0f 	cmp.w	r8, #15
  40168c:	f240 80fb 	bls.w	401886 <_malloc_r+0x4a6>
  401690:	6860      	ldr	r0, [r4, #4]
  401692:	f1a8 020c 	sub.w	r2, r8, #12
  401696:	f022 0207 	bic.w	r2, r2, #7
  40169a:	eb04 0e02 	add.w	lr, r4, r2
  40169e:	f000 0001 	and.w	r0, r0, #1
  4016a2:	f04f 0c05 	mov.w	ip, #5
  4016a6:	4310      	orrs	r0, r2
  4016a8:	2a0f      	cmp	r2, #15
  4016aa:	6060      	str	r0, [r4, #4]
  4016ac:	f8ce c004 	str.w	ip, [lr, #4]
  4016b0:	f8ce c008 	str.w	ip, [lr, #8]
  4016b4:	f200 8117 	bhi.w	4018e6 <_malloc_r+0x506>
  4016b8:	4b1d      	ldr	r3, [pc, #116]	; (401730 <_malloc_r+0x350>)
  4016ba:	68bc      	ldr	r4, [r7, #8]
  4016bc:	681a      	ldr	r2, [r3, #0]
  4016be:	4291      	cmp	r1, r2
  4016c0:	bf88      	it	hi
  4016c2:	6019      	strhi	r1, [r3, #0]
  4016c4:	4b1b      	ldr	r3, [pc, #108]	; (401734 <_malloc_r+0x354>)
  4016c6:	681a      	ldr	r2, [r3, #0]
  4016c8:	4291      	cmp	r1, r2
  4016ca:	6862      	ldr	r2, [r4, #4]
  4016cc:	bf88      	it	hi
  4016ce:	6019      	strhi	r1, [r3, #0]
  4016d0:	f022 0203 	bic.w	r2, r2, #3
  4016d4:	4296      	cmp	r6, r2
  4016d6:	eba2 0306 	sub.w	r3, r2, r6
  4016da:	d801      	bhi.n	4016e0 <_malloc_r+0x300>
  4016dc:	2b0f      	cmp	r3, #15
  4016de:	dc04      	bgt.n	4016ea <_malloc_r+0x30a>
  4016e0:	4628      	mov	r0, r5
  4016e2:	f000 f933 	bl	40194c <__malloc_unlock>
  4016e6:	2400      	movs	r4, #0
  4016e8:	e740      	b.n	40156c <_malloc_r+0x18c>
  4016ea:	19a2      	adds	r2, r4, r6
  4016ec:	f043 0301 	orr.w	r3, r3, #1
  4016f0:	f046 0601 	orr.w	r6, r6, #1
  4016f4:	6066      	str	r6, [r4, #4]
  4016f6:	4628      	mov	r0, r5
  4016f8:	60ba      	str	r2, [r7, #8]
  4016fa:	6053      	str	r3, [r2, #4]
  4016fc:	f000 f926 	bl	40194c <__malloc_unlock>
  401700:	3408      	adds	r4, #8
  401702:	4620      	mov	r0, r4
  401704:	b003      	add	sp, #12
  401706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40170a:	2b14      	cmp	r3, #20
  40170c:	d971      	bls.n	4017f2 <_malloc_r+0x412>
  40170e:	2b54      	cmp	r3, #84	; 0x54
  401710:	f200 80a3 	bhi.w	40185a <_malloc_r+0x47a>
  401714:	0b33      	lsrs	r3, r6, #12
  401716:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40171a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40171e:	00c3      	lsls	r3, r0, #3
  401720:	e680      	b.n	401424 <_malloc_r+0x44>
  401722:	bf00      	nop
  401724:	2000044c 	.word	0x2000044c
  401728:	200008ac 	.word	0x200008ac
  40172c:	2000087c 	.word	0x2000087c
  401730:	200008a4 	.word	0x200008a4
  401734:	200008a8 	.word	0x200008a8
  401738:	20000454 	.word	0x20000454
  40173c:	20000854 	.word	0x20000854
  401740:	0a5a      	lsrs	r2, r3, #9
  401742:	2a04      	cmp	r2, #4
  401744:	d95b      	bls.n	4017fe <_malloc_r+0x41e>
  401746:	2a14      	cmp	r2, #20
  401748:	f200 80ae 	bhi.w	4018a8 <_malloc_r+0x4c8>
  40174c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401750:	00c9      	lsls	r1, r1, #3
  401752:	325b      	adds	r2, #91	; 0x5b
  401754:	eb07 0c01 	add.w	ip, r7, r1
  401758:	5879      	ldr	r1, [r7, r1]
  40175a:	f1ac 0c08 	sub.w	ip, ip, #8
  40175e:	458c      	cmp	ip, r1
  401760:	f000 8088 	beq.w	401874 <_malloc_r+0x494>
  401764:	684a      	ldr	r2, [r1, #4]
  401766:	f022 0203 	bic.w	r2, r2, #3
  40176a:	4293      	cmp	r3, r2
  40176c:	d273      	bcs.n	401856 <_malloc_r+0x476>
  40176e:	6889      	ldr	r1, [r1, #8]
  401770:	458c      	cmp	ip, r1
  401772:	d1f7      	bne.n	401764 <_malloc_r+0x384>
  401774:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401778:	687b      	ldr	r3, [r7, #4]
  40177a:	60e2      	str	r2, [r4, #12]
  40177c:	f8c4 c008 	str.w	ip, [r4, #8]
  401780:	6094      	str	r4, [r2, #8]
  401782:	f8cc 400c 	str.w	r4, [ip, #12]
  401786:	e68f      	b.n	4014a8 <_malloc_r+0xc8>
  401788:	19a1      	adds	r1, r4, r6
  40178a:	f046 0c01 	orr.w	ip, r6, #1
  40178e:	f042 0601 	orr.w	r6, r2, #1
  401792:	f8c4 c004 	str.w	ip, [r4, #4]
  401796:	4628      	mov	r0, r5
  401798:	6179      	str	r1, [r7, #20]
  40179a:	6139      	str	r1, [r7, #16]
  40179c:	f8c1 e00c 	str.w	lr, [r1, #12]
  4017a0:	f8c1 e008 	str.w	lr, [r1, #8]
  4017a4:	604e      	str	r6, [r1, #4]
  4017a6:	50e2      	str	r2, [r4, r3]
  4017a8:	f000 f8d0 	bl	40194c <__malloc_unlock>
  4017ac:	3408      	adds	r4, #8
  4017ae:	e6dd      	b.n	40156c <_malloc_r+0x18c>
  4017b0:	687b      	ldr	r3, [r7, #4]
  4017b2:	e679      	b.n	4014a8 <_malloc_r+0xc8>
  4017b4:	f108 0801 	add.w	r8, r8, #1
  4017b8:	f018 0f03 	tst.w	r8, #3
  4017bc:	f10c 0c08 	add.w	ip, ip, #8
  4017c0:	f47f ae85 	bne.w	4014ce <_malloc_r+0xee>
  4017c4:	e02d      	b.n	401822 <_malloc_r+0x442>
  4017c6:	68dc      	ldr	r4, [r3, #12]
  4017c8:	42a3      	cmp	r3, r4
  4017ca:	bf08      	it	eq
  4017cc:	3002      	addeq	r0, #2
  4017ce:	f43f ae3e 	beq.w	40144e <_malloc_r+0x6e>
  4017d2:	e6bb      	b.n	40154c <_malloc_r+0x16c>
  4017d4:	4419      	add	r1, r3
  4017d6:	461c      	mov	r4, r3
  4017d8:	684a      	ldr	r2, [r1, #4]
  4017da:	68db      	ldr	r3, [r3, #12]
  4017dc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4017e0:	f042 0201 	orr.w	r2, r2, #1
  4017e4:	604a      	str	r2, [r1, #4]
  4017e6:	4628      	mov	r0, r5
  4017e8:	60f3      	str	r3, [r6, #12]
  4017ea:	609e      	str	r6, [r3, #8]
  4017ec:	f000 f8ae 	bl	40194c <__malloc_unlock>
  4017f0:	e6bc      	b.n	40156c <_malloc_r+0x18c>
  4017f2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4017f6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4017fa:	00c3      	lsls	r3, r0, #3
  4017fc:	e612      	b.n	401424 <_malloc_r+0x44>
  4017fe:	099a      	lsrs	r2, r3, #6
  401800:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401804:	00c9      	lsls	r1, r1, #3
  401806:	3238      	adds	r2, #56	; 0x38
  401808:	e7a4      	b.n	401754 <_malloc_r+0x374>
  40180a:	42bc      	cmp	r4, r7
  40180c:	d054      	beq.n	4018b8 <_malloc_r+0x4d8>
  40180e:	68bc      	ldr	r4, [r7, #8]
  401810:	6862      	ldr	r2, [r4, #4]
  401812:	f022 0203 	bic.w	r2, r2, #3
  401816:	e75d      	b.n	4016d4 <_malloc_r+0x2f4>
  401818:	f859 3908 	ldr.w	r3, [r9], #-8
  40181c:	4599      	cmp	r9, r3
  40181e:	f040 8086 	bne.w	40192e <_malloc_r+0x54e>
  401822:	f010 0f03 	tst.w	r0, #3
  401826:	f100 30ff 	add.w	r0, r0, #4294967295
  40182a:	d1f5      	bne.n	401818 <_malloc_r+0x438>
  40182c:	687b      	ldr	r3, [r7, #4]
  40182e:	ea23 0304 	bic.w	r3, r3, r4
  401832:	607b      	str	r3, [r7, #4]
  401834:	0064      	lsls	r4, r4, #1
  401836:	429c      	cmp	r4, r3
  401838:	f63f aec7 	bhi.w	4015ca <_malloc_r+0x1ea>
  40183c:	2c00      	cmp	r4, #0
  40183e:	f43f aec4 	beq.w	4015ca <_malloc_r+0x1ea>
  401842:	421c      	tst	r4, r3
  401844:	4640      	mov	r0, r8
  401846:	f47f ae3e 	bne.w	4014c6 <_malloc_r+0xe6>
  40184a:	0064      	lsls	r4, r4, #1
  40184c:	421c      	tst	r4, r3
  40184e:	f100 0004 	add.w	r0, r0, #4
  401852:	d0fa      	beq.n	40184a <_malloc_r+0x46a>
  401854:	e637      	b.n	4014c6 <_malloc_r+0xe6>
  401856:	468c      	mov	ip, r1
  401858:	e78c      	b.n	401774 <_malloc_r+0x394>
  40185a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40185e:	d815      	bhi.n	40188c <_malloc_r+0x4ac>
  401860:	0bf3      	lsrs	r3, r6, #15
  401862:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401866:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40186a:	00c3      	lsls	r3, r0, #3
  40186c:	e5da      	b.n	401424 <_malloc_r+0x44>
  40186e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401872:	e6ed      	b.n	401650 <_malloc_r+0x270>
  401874:	687b      	ldr	r3, [r7, #4]
  401876:	1092      	asrs	r2, r2, #2
  401878:	2101      	movs	r1, #1
  40187a:	fa01 f202 	lsl.w	r2, r1, r2
  40187e:	4313      	orrs	r3, r2
  401880:	607b      	str	r3, [r7, #4]
  401882:	4662      	mov	r2, ip
  401884:	e779      	b.n	40177a <_malloc_r+0x39a>
  401886:	2301      	movs	r3, #1
  401888:	6053      	str	r3, [r2, #4]
  40188a:	e729      	b.n	4016e0 <_malloc_r+0x300>
  40188c:	f240 5254 	movw	r2, #1364	; 0x554
  401890:	4293      	cmp	r3, r2
  401892:	d822      	bhi.n	4018da <_malloc_r+0x4fa>
  401894:	0cb3      	lsrs	r3, r6, #18
  401896:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40189a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40189e:	00c3      	lsls	r3, r0, #3
  4018a0:	e5c0      	b.n	401424 <_malloc_r+0x44>
  4018a2:	f103 0b10 	add.w	fp, r3, #16
  4018a6:	e6ae      	b.n	401606 <_malloc_r+0x226>
  4018a8:	2a54      	cmp	r2, #84	; 0x54
  4018aa:	d829      	bhi.n	401900 <_malloc_r+0x520>
  4018ac:	0b1a      	lsrs	r2, r3, #12
  4018ae:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4018b2:	00c9      	lsls	r1, r1, #3
  4018b4:	326e      	adds	r2, #110	; 0x6e
  4018b6:	e74d      	b.n	401754 <_malloc_r+0x374>
  4018b8:	4b20      	ldr	r3, [pc, #128]	; (40193c <_malloc_r+0x55c>)
  4018ba:	6819      	ldr	r1, [r3, #0]
  4018bc:	4459      	add	r1, fp
  4018be:	6019      	str	r1, [r3, #0]
  4018c0:	e6b2      	b.n	401628 <_malloc_r+0x248>
  4018c2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4018c6:	2800      	cmp	r0, #0
  4018c8:	f47f aeae 	bne.w	401628 <_malloc_r+0x248>
  4018cc:	eb08 030b 	add.w	r3, r8, fp
  4018d0:	68ba      	ldr	r2, [r7, #8]
  4018d2:	f043 0301 	orr.w	r3, r3, #1
  4018d6:	6053      	str	r3, [r2, #4]
  4018d8:	e6ee      	b.n	4016b8 <_malloc_r+0x2d8>
  4018da:	207f      	movs	r0, #127	; 0x7f
  4018dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4018e0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4018e4:	e59e      	b.n	401424 <_malloc_r+0x44>
  4018e6:	f104 0108 	add.w	r1, r4, #8
  4018ea:	4628      	mov	r0, r5
  4018ec:	9300      	str	r3, [sp, #0]
  4018ee:	f7ff fc29 	bl	401144 <_free_r>
  4018f2:	9b00      	ldr	r3, [sp, #0]
  4018f4:	6819      	ldr	r1, [r3, #0]
  4018f6:	e6df      	b.n	4016b8 <_malloc_r+0x2d8>
  4018f8:	2001      	movs	r0, #1
  4018fa:	f04f 0900 	mov.w	r9, #0
  4018fe:	e6bc      	b.n	40167a <_malloc_r+0x29a>
  401900:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401904:	d805      	bhi.n	401912 <_malloc_r+0x532>
  401906:	0bda      	lsrs	r2, r3, #15
  401908:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40190c:	00c9      	lsls	r1, r1, #3
  40190e:	3277      	adds	r2, #119	; 0x77
  401910:	e720      	b.n	401754 <_malloc_r+0x374>
  401912:	f240 5154 	movw	r1, #1364	; 0x554
  401916:	428a      	cmp	r2, r1
  401918:	d805      	bhi.n	401926 <_malloc_r+0x546>
  40191a:	0c9a      	lsrs	r2, r3, #18
  40191c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401920:	00c9      	lsls	r1, r1, #3
  401922:	327c      	adds	r2, #124	; 0x7c
  401924:	e716      	b.n	401754 <_malloc_r+0x374>
  401926:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40192a:	227e      	movs	r2, #126	; 0x7e
  40192c:	e712      	b.n	401754 <_malloc_r+0x374>
  40192e:	687b      	ldr	r3, [r7, #4]
  401930:	e780      	b.n	401834 <_malloc_r+0x454>
  401932:	08f0      	lsrs	r0, r6, #3
  401934:	f106 0308 	add.w	r3, r6, #8
  401938:	e600      	b.n	40153c <_malloc_r+0x15c>
  40193a:	bf00      	nop
  40193c:	2000087c 	.word	0x2000087c

00401940 <__malloc_lock>:
  401940:	4801      	ldr	r0, [pc, #4]	; (401948 <__malloc_lock+0x8>)
  401942:	f7ff bd13 	b.w	40136c <__retarget_lock_acquire_recursive>
  401946:	bf00      	nop
  401948:	20000934 	.word	0x20000934

0040194c <__malloc_unlock>:
  40194c:	4801      	ldr	r0, [pc, #4]	; (401954 <__malloc_unlock+0x8>)
  40194e:	f7ff bd0f 	b.w	401370 <__retarget_lock_release_recursive>
  401952:	bf00      	nop
  401954:	20000934 	.word	0x20000934

00401958 <_sbrk_r>:
  401958:	b538      	push	{r3, r4, r5, lr}
  40195a:	4c07      	ldr	r4, [pc, #28]	; (401978 <_sbrk_r+0x20>)
  40195c:	2300      	movs	r3, #0
  40195e:	4605      	mov	r5, r0
  401960:	4608      	mov	r0, r1
  401962:	6023      	str	r3, [r4, #0]
  401964:	f7fe ff80 	bl	400868 <_sbrk>
  401968:	1c43      	adds	r3, r0, #1
  40196a:	d000      	beq.n	40196e <_sbrk_r+0x16>
  40196c:	bd38      	pop	{r3, r4, r5, pc}
  40196e:	6823      	ldr	r3, [r4, #0]
  401970:	2b00      	cmp	r3, #0
  401972:	d0fb      	beq.n	40196c <_sbrk_r+0x14>
  401974:	602b      	str	r3, [r5, #0]
  401976:	bd38      	pop	{r3, r4, r5, pc}
  401978:	20000948 	.word	0x20000948

0040197c <__sread>:
  40197c:	b510      	push	{r4, lr}
  40197e:	460c      	mov	r4, r1
  401980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401984:	f000 f954 	bl	401c30 <_read_r>
  401988:	2800      	cmp	r0, #0
  40198a:	db03      	blt.n	401994 <__sread+0x18>
  40198c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40198e:	4403      	add	r3, r0
  401990:	6523      	str	r3, [r4, #80]	; 0x50
  401992:	bd10      	pop	{r4, pc}
  401994:	89a3      	ldrh	r3, [r4, #12]
  401996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40199a:	81a3      	strh	r3, [r4, #12]
  40199c:	bd10      	pop	{r4, pc}
  40199e:	bf00      	nop

004019a0 <__swrite>:
  4019a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4019a4:	4616      	mov	r6, r2
  4019a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4019aa:	461f      	mov	r7, r3
  4019ac:	05d3      	lsls	r3, r2, #23
  4019ae:	460c      	mov	r4, r1
  4019b0:	4605      	mov	r5, r0
  4019b2:	d507      	bpl.n	4019c4 <__swrite+0x24>
  4019b4:	2200      	movs	r2, #0
  4019b6:	2302      	movs	r3, #2
  4019b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4019bc:	f000 f922 	bl	401c04 <_lseek_r>
  4019c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4019c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4019c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4019cc:	81a2      	strh	r2, [r4, #12]
  4019ce:	463b      	mov	r3, r7
  4019d0:	4632      	mov	r2, r6
  4019d2:	4628      	mov	r0, r5
  4019d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4019d8:	f000 b814 	b.w	401a04 <_write_r>

004019dc <__sseek>:
  4019dc:	b510      	push	{r4, lr}
  4019de:	460c      	mov	r4, r1
  4019e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4019e4:	f000 f90e 	bl	401c04 <_lseek_r>
  4019e8:	89a3      	ldrh	r3, [r4, #12]
  4019ea:	1c42      	adds	r2, r0, #1
  4019ec:	bf0e      	itee	eq
  4019ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4019f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4019f6:	6520      	strne	r0, [r4, #80]	; 0x50
  4019f8:	81a3      	strh	r3, [r4, #12]
  4019fa:	bd10      	pop	{r4, pc}

004019fc <__sclose>:
  4019fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a00:	f000 b878 	b.w	401af4 <_close_r>

00401a04 <_write_r>:
  401a04:	b570      	push	{r4, r5, r6, lr}
  401a06:	460d      	mov	r5, r1
  401a08:	4c08      	ldr	r4, [pc, #32]	; (401a2c <_write_r+0x28>)
  401a0a:	4611      	mov	r1, r2
  401a0c:	4606      	mov	r6, r0
  401a0e:	461a      	mov	r2, r3
  401a10:	4628      	mov	r0, r5
  401a12:	2300      	movs	r3, #0
  401a14:	6023      	str	r3, [r4, #0]
  401a16:	f7fe fc77 	bl	400308 <_write>
  401a1a:	1c43      	adds	r3, r0, #1
  401a1c:	d000      	beq.n	401a20 <_write_r+0x1c>
  401a1e:	bd70      	pop	{r4, r5, r6, pc}
  401a20:	6823      	ldr	r3, [r4, #0]
  401a22:	2b00      	cmp	r3, #0
  401a24:	d0fb      	beq.n	401a1e <_write_r+0x1a>
  401a26:	6033      	str	r3, [r6, #0]
  401a28:	bd70      	pop	{r4, r5, r6, pc}
  401a2a:	bf00      	nop
  401a2c:	20000948 	.word	0x20000948

00401a30 <__register_exitproc>:
  401a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a34:	4d2c      	ldr	r5, [pc, #176]	; (401ae8 <__register_exitproc+0xb8>)
  401a36:	4606      	mov	r6, r0
  401a38:	6828      	ldr	r0, [r5, #0]
  401a3a:	4698      	mov	r8, r3
  401a3c:	460f      	mov	r7, r1
  401a3e:	4691      	mov	r9, r2
  401a40:	f7ff fc94 	bl	40136c <__retarget_lock_acquire_recursive>
  401a44:	4b29      	ldr	r3, [pc, #164]	; (401aec <__register_exitproc+0xbc>)
  401a46:	681c      	ldr	r4, [r3, #0]
  401a48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401a4c:	2b00      	cmp	r3, #0
  401a4e:	d03e      	beq.n	401ace <__register_exitproc+0x9e>
  401a50:	685a      	ldr	r2, [r3, #4]
  401a52:	2a1f      	cmp	r2, #31
  401a54:	dc1c      	bgt.n	401a90 <__register_exitproc+0x60>
  401a56:	f102 0e01 	add.w	lr, r2, #1
  401a5a:	b176      	cbz	r6, 401a7a <__register_exitproc+0x4a>
  401a5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401a60:	2401      	movs	r4, #1
  401a62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401a66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401a6a:	4094      	lsls	r4, r2
  401a6c:	4320      	orrs	r0, r4
  401a6e:	2e02      	cmp	r6, #2
  401a70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401a74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401a78:	d023      	beq.n	401ac2 <__register_exitproc+0x92>
  401a7a:	3202      	adds	r2, #2
  401a7c:	f8c3 e004 	str.w	lr, [r3, #4]
  401a80:	6828      	ldr	r0, [r5, #0]
  401a82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401a86:	f7ff fc73 	bl	401370 <__retarget_lock_release_recursive>
  401a8a:	2000      	movs	r0, #0
  401a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a90:	4b17      	ldr	r3, [pc, #92]	; (401af0 <__register_exitproc+0xc0>)
  401a92:	b30b      	cbz	r3, 401ad8 <__register_exitproc+0xa8>
  401a94:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401a98:	f7ff fc9a 	bl	4013d0 <malloc>
  401a9c:	4603      	mov	r3, r0
  401a9e:	b1d8      	cbz	r0, 401ad8 <__register_exitproc+0xa8>
  401aa0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401aa4:	6002      	str	r2, [r0, #0]
  401aa6:	2100      	movs	r1, #0
  401aa8:	6041      	str	r1, [r0, #4]
  401aaa:	460a      	mov	r2, r1
  401aac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401ab0:	f04f 0e01 	mov.w	lr, #1
  401ab4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401ab8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401abc:	2e00      	cmp	r6, #0
  401abe:	d0dc      	beq.n	401a7a <__register_exitproc+0x4a>
  401ac0:	e7cc      	b.n	401a5c <__register_exitproc+0x2c>
  401ac2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401ac6:	430c      	orrs	r4, r1
  401ac8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401acc:	e7d5      	b.n	401a7a <__register_exitproc+0x4a>
  401ace:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401ad2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401ad6:	e7bb      	b.n	401a50 <__register_exitproc+0x20>
  401ad8:	6828      	ldr	r0, [r5, #0]
  401ada:	f7ff fc49 	bl	401370 <__retarget_lock_release_recursive>
  401ade:	f04f 30ff 	mov.w	r0, #4294967295
  401ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ae6:	bf00      	nop
  401ae8:	20000448 	.word	0x20000448
  401aec:	00401cbc 	.word	0x00401cbc
  401af0:	004013d1 	.word	0x004013d1

00401af4 <_close_r>:
  401af4:	b538      	push	{r3, r4, r5, lr}
  401af6:	4c07      	ldr	r4, [pc, #28]	; (401b14 <_close_r+0x20>)
  401af8:	2300      	movs	r3, #0
  401afa:	4605      	mov	r5, r0
  401afc:	4608      	mov	r0, r1
  401afe:	6023      	str	r3, [r4, #0]
  401b00:	f7fe fece 	bl	4008a0 <_close>
  401b04:	1c43      	adds	r3, r0, #1
  401b06:	d000      	beq.n	401b0a <_close_r+0x16>
  401b08:	bd38      	pop	{r3, r4, r5, pc}
  401b0a:	6823      	ldr	r3, [r4, #0]
  401b0c:	2b00      	cmp	r3, #0
  401b0e:	d0fb      	beq.n	401b08 <_close_r+0x14>
  401b10:	602b      	str	r3, [r5, #0]
  401b12:	bd38      	pop	{r3, r4, r5, pc}
  401b14:	20000948 	.word	0x20000948

00401b18 <_fclose_r>:
  401b18:	b570      	push	{r4, r5, r6, lr}
  401b1a:	b159      	cbz	r1, 401b34 <_fclose_r+0x1c>
  401b1c:	4605      	mov	r5, r0
  401b1e:	460c      	mov	r4, r1
  401b20:	b110      	cbz	r0, 401b28 <_fclose_r+0x10>
  401b22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401b24:	2b00      	cmp	r3, #0
  401b26:	d03c      	beq.n	401ba2 <_fclose_r+0x8a>
  401b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401b2a:	07d8      	lsls	r0, r3, #31
  401b2c:	d505      	bpl.n	401b3a <_fclose_r+0x22>
  401b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b32:	b92b      	cbnz	r3, 401b40 <_fclose_r+0x28>
  401b34:	2600      	movs	r6, #0
  401b36:	4630      	mov	r0, r6
  401b38:	bd70      	pop	{r4, r5, r6, pc}
  401b3a:	89a3      	ldrh	r3, [r4, #12]
  401b3c:	0599      	lsls	r1, r3, #22
  401b3e:	d53c      	bpl.n	401bba <_fclose_r+0xa2>
  401b40:	4621      	mov	r1, r4
  401b42:	4628      	mov	r0, r5
  401b44:	f7ff f964 	bl	400e10 <__sflush_r>
  401b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401b4a:	4606      	mov	r6, r0
  401b4c:	b133      	cbz	r3, 401b5c <_fclose_r+0x44>
  401b4e:	69e1      	ldr	r1, [r4, #28]
  401b50:	4628      	mov	r0, r5
  401b52:	4798      	blx	r3
  401b54:	2800      	cmp	r0, #0
  401b56:	bfb8      	it	lt
  401b58:	f04f 36ff 	movlt.w	r6, #4294967295
  401b5c:	89a3      	ldrh	r3, [r4, #12]
  401b5e:	061a      	lsls	r2, r3, #24
  401b60:	d422      	bmi.n	401ba8 <_fclose_r+0x90>
  401b62:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401b64:	b141      	cbz	r1, 401b78 <_fclose_r+0x60>
  401b66:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401b6a:	4299      	cmp	r1, r3
  401b6c:	d002      	beq.n	401b74 <_fclose_r+0x5c>
  401b6e:	4628      	mov	r0, r5
  401b70:	f7ff fae8 	bl	401144 <_free_r>
  401b74:	2300      	movs	r3, #0
  401b76:	6323      	str	r3, [r4, #48]	; 0x30
  401b78:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401b7a:	b121      	cbz	r1, 401b86 <_fclose_r+0x6e>
  401b7c:	4628      	mov	r0, r5
  401b7e:	f7ff fae1 	bl	401144 <_free_r>
  401b82:	2300      	movs	r3, #0
  401b84:	6463      	str	r3, [r4, #68]	; 0x44
  401b86:	f7ff fa67 	bl	401058 <__sfp_lock_acquire>
  401b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401b8c:	2200      	movs	r2, #0
  401b8e:	07db      	lsls	r3, r3, #31
  401b90:	81a2      	strh	r2, [r4, #12]
  401b92:	d50e      	bpl.n	401bb2 <_fclose_r+0x9a>
  401b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401b96:	f7ff fbe7 	bl	401368 <__retarget_lock_close_recursive>
  401b9a:	f7ff fa63 	bl	401064 <__sfp_lock_release>
  401b9e:	4630      	mov	r0, r6
  401ba0:	bd70      	pop	{r4, r5, r6, pc}
  401ba2:	f7ff fa2d 	bl	401000 <__sinit>
  401ba6:	e7bf      	b.n	401b28 <_fclose_r+0x10>
  401ba8:	6921      	ldr	r1, [r4, #16]
  401baa:	4628      	mov	r0, r5
  401bac:	f7ff faca 	bl	401144 <_free_r>
  401bb0:	e7d7      	b.n	401b62 <_fclose_r+0x4a>
  401bb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bb4:	f7ff fbdc 	bl	401370 <__retarget_lock_release_recursive>
  401bb8:	e7ec      	b.n	401b94 <_fclose_r+0x7c>
  401bba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bbc:	f7ff fbd6 	bl	40136c <__retarget_lock_acquire_recursive>
  401bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	d1bb      	bne.n	401b40 <_fclose_r+0x28>
  401bc8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401bca:	f016 0601 	ands.w	r6, r6, #1
  401bce:	d1b1      	bne.n	401b34 <_fclose_r+0x1c>
  401bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bd2:	f7ff fbcd 	bl	401370 <__retarget_lock_release_recursive>
  401bd6:	4630      	mov	r0, r6
  401bd8:	bd70      	pop	{r4, r5, r6, pc}
  401bda:	bf00      	nop

00401bdc <_fstat_r>:
  401bdc:	b538      	push	{r3, r4, r5, lr}
  401bde:	460b      	mov	r3, r1
  401be0:	4c07      	ldr	r4, [pc, #28]	; (401c00 <_fstat_r+0x24>)
  401be2:	4605      	mov	r5, r0
  401be4:	4611      	mov	r1, r2
  401be6:	4618      	mov	r0, r3
  401be8:	2300      	movs	r3, #0
  401bea:	6023      	str	r3, [r4, #0]
  401bec:	f7fe fe5b 	bl	4008a6 <_fstat>
  401bf0:	1c43      	adds	r3, r0, #1
  401bf2:	d000      	beq.n	401bf6 <_fstat_r+0x1a>
  401bf4:	bd38      	pop	{r3, r4, r5, pc}
  401bf6:	6823      	ldr	r3, [r4, #0]
  401bf8:	2b00      	cmp	r3, #0
  401bfa:	d0fb      	beq.n	401bf4 <_fstat_r+0x18>
  401bfc:	602b      	str	r3, [r5, #0]
  401bfe:	bd38      	pop	{r3, r4, r5, pc}
  401c00:	20000948 	.word	0x20000948

00401c04 <_lseek_r>:
  401c04:	b570      	push	{r4, r5, r6, lr}
  401c06:	460d      	mov	r5, r1
  401c08:	4c08      	ldr	r4, [pc, #32]	; (401c2c <_lseek_r+0x28>)
  401c0a:	4611      	mov	r1, r2
  401c0c:	4606      	mov	r6, r0
  401c0e:	461a      	mov	r2, r3
  401c10:	4628      	mov	r0, r5
  401c12:	2300      	movs	r3, #0
  401c14:	6023      	str	r3, [r4, #0]
  401c16:	f7fe fe4b 	bl	4008b0 <_lseek>
  401c1a:	1c43      	adds	r3, r0, #1
  401c1c:	d000      	beq.n	401c20 <_lseek_r+0x1c>
  401c1e:	bd70      	pop	{r4, r5, r6, pc}
  401c20:	6823      	ldr	r3, [r4, #0]
  401c22:	2b00      	cmp	r3, #0
  401c24:	d0fb      	beq.n	401c1e <_lseek_r+0x1a>
  401c26:	6033      	str	r3, [r6, #0]
  401c28:	bd70      	pop	{r4, r5, r6, pc}
  401c2a:	bf00      	nop
  401c2c:	20000948 	.word	0x20000948

00401c30 <_read_r>:
  401c30:	b570      	push	{r4, r5, r6, lr}
  401c32:	460d      	mov	r5, r1
  401c34:	4c08      	ldr	r4, [pc, #32]	; (401c58 <_read_r+0x28>)
  401c36:	4611      	mov	r1, r2
  401c38:	4606      	mov	r6, r0
  401c3a:	461a      	mov	r2, r3
  401c3c:	4628      	mov	r0, r5
  401c3e:	2300      	movs	r3, #0
  401c40:	6023      	str	r3, [r4, #0]
  401c42:	f7fe fb2d 	bl	4002a0 <_read>
  401c46:	1c43      	adds	r3, r0, #1
  401c48:	d000      	beq.n	401c4c <_read_r+0x1c>
  401c4a:	bd70      	pop	{r4, r5, r6, pc}
  401c4c:	6823      	ldr	r3, [r4, #0]
  401c4e:	2b00      	cmp	r3, #0
  401c50:	d0fb      	beq.n	401c4a <_read_r+0x1a>
  401c52:	6033      	str	r3, [r6, #0]
  401c54:	bd70      	pop	{r4, r5, r6, pc}
  401c56:	bf00      	nop
  401c58:	20000948 	.word	0x20000948

00401c5c <adc_interrupt_mask>:
  401c5c:	00000001 00000002 00000004 00000008     ................
  401c6c:	00000010 00000020 00000040 00000080     .... ...@.......
  401c7c:	00000100 00000200 00000400 00000800     ................
  401c8c:	00001000 00002000 00004000 00008000     ..... ...@......
  401c9c:	00010000 00080000 00800000 01000000     ................
  401cac:	02000000 04000000 08000000 10000000     ................

00401cbc <_global_impure_ptr>:
  401cbc:	20000020                                 .. 

00401cc0 <_init>:
  401cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cc2:	bf00      	nop
  401cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401cc6:	bc08      	pop	{r3}
  401cc8:	469e      	mov	lr, r3
  401cca:	4770      	bx	lr

00401ccc <__init_array_start>:
  401ccc:	00400df1 	.word	0x00400df1

00401cd0 <__frame_dummy_init_array_entry>:
  401cd0:	004000e5                                ..@.

00401cd4 <_fini>:
  401cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cd6:	bf00      	nop
  401cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401cda:	bc08      	pop	{r3}
  401cdc:	469e      	mov	lr, r3
  401cde:	4770      	bx	lr

00401ce0 <__fini_array_start>:
  401ce0:	004000c1 	.word	0x004000c1
